// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/protocol/lorawan/lorawan.proto
// DO NOT EDIT!

/*
	Package lorawan is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/ttn/api/protocol/lorawan/lorawan.proto

	It has these top-level messages:
		Metadata
		TxConfiguration
		ActivationMetadata
		PHYPayload
		MHdr
		MACPayload
		FHdr
		FCtrl
*/
package lorawan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Region int32

const (
	Region_EU863_870 Region = 0
	Region_US902_928 Region = 1
	Region_CN779_787 Region = 2
	Region_EU433     Region = 3
	Region_AU915_928 Region = 4
	Region_CN470_510 Region = 5
)

var Region_name = map[int32]string{
	0: "EU863_870",
	1: "US902_928",
	2: "CN779_787",
	3: "EU433",
	4: "AU915_928",
	5: "CN470_510",
}
var Region_value = map[string]int32{
	"EU863_870": 0,
	"US902_928": 1,
	"CN779_787": 2,
	"EU433":     3,
	"AU915_928": 4,
	"CN470_510": 5,
}

func (x Region) String() string {
	return proto.EnumName(Region_name, int32(x))
}
func (Region) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

type Metadata_Modulation int32

const (
	Metadata_LORA Metadata_Modulation = 0
	Metadata_FSK  Metadata_Modulation = 1
)

var Metadata_Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Metadata_Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (x Metadata_Modulation) String() string {
	return proto.EnumName(Metadata_Modulation_name, int32(x))
}
func (Metadata_Modulation) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0, 0} }

type Metadata struct {
	Modulation Metadata_Modulation `protobuf:"varint,11,opt,name=modulation,proto3,enum=lorawan.Metadata_Modulation" json:"modulation,omitempty"`
	DataRate   string              `protobuf:"bytes,12,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	BitRate    uint32              `protobuf:"varint,13,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	CodingRate string              `protobuf:"bytes,14,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

type TxConfiguration struct {
	DevAddr []byte `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
}

func (m *TxConfiguration) Reset()                    { *m = TxConfiguration{} }
func (m *TxConfiguration) String() string            { return proto.CompactTextString(m) }
func (*TxConfiguration) ProtoMessage()               {}
func (*TxConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{1} }

type ActivationMetadata struct {
	DevAddr           []byte `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	NetworkSessionKey []byte `protobuf:"bytes,2,opt,name=network_session_key,json=networkSessionKey,proto3" json:"network_session_key,omitempty"`
}

func (m *ActivationMetadata) Reset()                    { *m = ActivationMetadata{} }
func (m *ActivationMetadata) String() string            { return proto.CompactTextString(m) }
func (*ActivationMetadata) ProtoMessage()               {}
func (*ActivationMetadata) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{2} }

type PHYPayload struct {
	Mhdr       *MHdr       `protobuf:"bytes,1,opt,name=mhdr" json:"mhdr,omitempty"`
	MACPayload *MACPayload `protobuf:"bytes,2,opt,name=MAC_payload,json=mACPayload" json:"MAC_payload,omitempty"`
	Mic        []byte      `protobuf:"bytes,3,opt,name=mic,proto3" json:"mic,omitempty"`
}

func (m *PHYPayload) Reset()                    { *m = PHYPayload{} }
func (m *PHYPayload) String() string            { return proto.CompactTextString(m) }
func (*PHYPayload) ProtoMessage()               {}
func (*PHYPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{3} }

func (m *PHYPayload) GetMhdr() *MHdr {
	if m != nil {
		return m.Mhdr
	}
	return nil
}

func (m *PHYPayload) GetMACPayload() *MACPayload {
	if m != nil {
		return m.MACPayload
	}
	return nil
}

type MHdr struct {
	MType uint32 `protobuf:"varint,1,opt,name=m_type,json=mType,proto3" json:"m_type,omitempty"`
	Major uint32 `protobuf:"varint,2,opt,name=major,proto3" json:"major,omitempty"`
}

func (m *MHdr) Reset()                    { *m = MHdr{} }
func (m *MHdr) String() string            { return proto.CompactTextString(m) }
func (*MHdr) ProtoMessage()               {}
func (*MHdr) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{4} }

type MACPayload struct {
	FHdr       *FHdr  `protobuf:"bytes,1,opt,name=f_hdr,json=fHdr" json:"f_hdr,omitempty"`
	FPort      uint32 `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FRMPayload []byte `protobuf:"bytes,3,opt,name=FRM_payload,json=fRMPayload,proto3" json:"FRM_payload,omitempty"`
}

func (m *MACPayload) Reset()                    { *m = MACPayload{} }
func (m *MACPayload) String() string            { return proto.CompactTextString(m) }
func (*MACPayload) ProtoMessage()               {}
func (*MACPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{5} }

func (m *MACPayload) GetFHdr() *FHdr {
	if m != nil {
		return m.FHdr
	}
	return nil
}

type FHdr struct {
	DevAddr []byte   `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	FCtrl   *FCtrl   `protobuf:"bytes,2,opt,name=f_ctrl,json=fCtrl" json:"f_ctrl,omitempty"`
	FCnt    uint32   `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FOpts   [][]byte `protobuf:"bytes,4,rep,name=f_opts,json=fOpts" json:"f_opts,omitempty"`
}

func (m *FHdr) Reset()                    { *m = FHdr{} }
func (m *FHdr) String() string            { return proto.CompactTextString(m) }
func (*FHdr) ProtoMessage()               {}
func (*FHdr) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{6} }

func (m *FHdr) GetFCtrl() *FCtrl {
	if m != nil {
		return m.FCtrl
	}
	return nil
}

type FCtrl struct {
	Adr       bool   `protobuf:"varint,1,opt,name=adr,proto3" json:"adr,omitempty"`
	AdrAckReq bool   `protobuf:"varint,2,opt,name=adr_ack_req,json=adrAckReq,proto3" json:"adr_ack_req,omitempty"`
	Ack       bool   `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	FPending  bool   `protobuf:"varint,4,opt,name=f_pending,json=fPending,proto3" json:"f_pending,omitempty"`
	FOptsLen  []byte `protobuf:"bytes,5,opt,name=f_opts_len,json=fOptsLen,proto3" json:"f_opts_len,omitempty"`
}

func (m *FCtrl) Reset()                    { *m = FCtrl{} }
func (m *FCtrl) String() string            { return proto.CompactTextString(m) }
func (*FCtrl) ProtoMessage()               {}
func (*FCtrl) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{7} }

func init() {
	proto.RegisterType((*Metadata)(nil), "lorawan.Metadata")
	proto.RegisterType((*TxConfiguration)(nil), "lorawan.TxConfiguration")
	proto.RegisterType((*ActivationMetadata)(nil), "lorawan.ActivationMetadata")
	proto.RegisterType((*PHYPayload)(nil), "lorawan.PHYPayload")
	proto.RegisterType((*MHdr)(nil), "lorawan.MHdr")
	proto.RegisterType((*MACPayload)(nil), "lorawan.MACPayload")
	proto.RegisterType((*FHdr)(nil), "lorawan.FHdr")
	proto.RegisterType((*FCtrl)(nil), "lorawan.FCtrl")
	proto.RegisterEnum("lorawan.Region", Region_name, Region_value)
	proto.RegisterEnum("lorawan.Metadata_Modulation", Metadata_Modulation_name, Metadata_Modulation_value)
}
func (m *Metadata) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Metadata) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Modulation != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintLorawan(data, i, uint64(m.Modulation))
	}
	if len(m.DataRate) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintLorawan(data, i, uint64(len(m.DataRate)))
		i += copy(data[i:], m.DataRate)
	}
	if m.BitRate != 0 {
		data[i] = 0x68
		i++
		i = encodeVarintLorawan(data, i, uint64(m.BitRate))
	}
	if len(m.CodingRate) > 0 {
		data[i] = 0x72
		i++
		i = encodeVarintLorawan(data, i, uint64(len(m.CodingRate)))
		i += copy(data[i:], m.CodingRate)
	}
	return i, nil
}

func (m *TxConfiguration) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TxConfiguration) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DevAddr) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintLorawan(data, i, uint64(len(m.DevAddr)))
		i += copy(data[i:], m.DevAddr)
	}
	return i, nil
}

func (m *ActivationMetadata) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ActivationMetadata) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DevAddr) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintLorawan(data, i, uint64(len(m.DevAddr)))
		i += copy(data[i:], m.DevAddr)
	}
	if len(m.NetworkSessionKey) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintLorawan(data, i, uint64(len(m.NetworkSessionKey)))
		i += copy(data[i:], m.NetworkSessionKey)
	}
	return i, nil
}

func (m *PHYPayload) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PHYPayload) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mhdr != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLorawan(data, i, uint64(m.Mhdr.Size()))
		n1, err := m.Mhdr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MACPayload != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLorawan(data, i, uint64(m.MACPayload.Size()))
		n2, err := m.MACPayload.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Mic) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintLorawan(data, i, uint64(len(m.Mic)))
		i += copy(data[i:], m.Mic)
	}
	return i, nil
}

func (m *MHdr) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MHdr) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintLorawan(data, i, uint64(m.MType))
	}
	if m.Major != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintLorawan(data, i, uint64(m.Major))
	}
	return i, nil
}

func (m *MACPayload) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MACPayload) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FHdr != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLorawan(data, i, uint64(m.FHdr.Size()))
		n3, err := m.FHdr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.FPort != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintLorawan(data, i, uint64(m.FPort))
	}
	if len(m.FRMPayload) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintLorawan(data, i, uint64(len(m.FRMPayload)))
		i += copy(data[i:], m.FRMPayload)
	}
	return i, nil
}

func (m *FHdr) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FHdr) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DevAddr) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintLorawan(data, i, uint64(len(m.DevAddr)))
		i += copy(data[i:], m.DevAddr)
	}
	if m.FCtrl != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLorawan(data, i, uint64(m.FCtrl.Size()))
		n4, err := m.FCtrl.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.FCnt != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintLorawan(data, i, uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, b := range m.FOpts {
			data[i] = 0x22
			i++
			i = encodeVarintLorawan(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	return i, nil
}

func (m *FCtrl) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FCtrl) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Adr {
		data[i] = 0x8
		i++
		if m.Adr {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.AdrAckReq {
		data[i] = 0x10
		i++
		if m.AdrAckReq {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Ack {
		data[i] = 0x18
		i++
		if m.Ack {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.FPending {
		data[i] = 0x20
		i++
		if m.FPending {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.FOptsLen) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintLorawan(data, i, uint64(len(m.FOptsLen)))
		i += copy(data[i:], m.FOptsLen)
	}
	return i, nil
}

func encodeFixed64Lorawan(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Lorawan(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLorawan(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Metadata) Size() (n int) {
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovLorawan(uint64(m.Modulation))
	}
	l = len(m.DataRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *TxConfiguration) Size() (n int) {
	var l int
	_ = l
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *ActivationMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.NetworkSessionKey)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *PHYPayload) Size() (n int) {
	var l int
	_ = l
	if m.Mhdr != nil {
		l = m.Mhdr.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.MACPayload != nil {
		l = m.MACPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.Mic)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *MHdr) Size() (n int) {
	var l int
	_ = l
	if m.MType != 0 {
		n += 1 + sovLorawan(uint64(m.MType))
	}
	if m.Major != 0 {
		n += 1 + sovLorawan(uint64(m.Major))
	}
	return n
}

func (m *MACPayload) Size() (n int) {
	var l int
	_ = l
	if m.FHdr != nil {
		l = m.FHdr.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FPort != 0 {
		n += 1 + sovLorawan(uint64(m.FPort))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FHdr) Size() (n int) {
	var l int
	_ = l
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCtrl != nil {
		l = m.FCtrl.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, b := range m.FOpts {
			l = len(b)
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *FCtrl) Size() (n int) {
	var l int
	_ = l
	if m.Adr {
		n += 2
	}
	if m.AdrAckReq {
		n += 2
	}
	if m.Ack {
		n += 2
	}
	if m.FPending {
		n += 2
	}
	l = len(m.FOptsLen)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func sovLorawan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLorawan(x uint64) (n int) {
	return sovLorawan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Modulation |= (Metadata_Modulation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRate = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.BitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxConfiguration) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivationMetadata) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivationMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivationMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkSessionKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkSessionKey = append(m.NetworkSessionKey[:0], data[iNdEx:postIndex]...)
			if m.NetworkSessionKey == nil {
				m.NetworkSessionKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PHYPayload) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PHYPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PHYPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mhdr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mhdr == nil {
				m.Mhdr = &MHdr{}
			}
			if err := m.Mhdr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MACPayload == nil {
				m.MACPayload = &MACPayload{}
			}
			if err := m.MACPayload.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mic", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mic = append(m.Mic[:0], data[iNdEx:postIndex]...)
			if m.Mic == nil {
				m.Mic = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHdr) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHdr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHdr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Major |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACPayload) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FHdr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FHdr == nil {
				m.FHdr = &FHdr{}
			}
			if err := m.FHdr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], data[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FHdr) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FHdr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FHdr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FCtrl == nil {
				m.FCtrl = &FCtrl{}
			}
			if err := m.FCtrl.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOpts = append(m.FOpts, make([]byte, postIndex-iNdEx))
			copy(m.FOpts[len(m.FOpts)-1], data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FCtrl) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FCtrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FCtrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Adr = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdrAckReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdrAckReq = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FPending = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOptsLen", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOptsLen = append(m.FOptsLen[:0], data[iNdEx:postIndex]...)
			if m.FOptsLen == nil {
				m.FOptsLen = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLorawan(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLorawan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLorawan(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLorawan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLorawan   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorLorawan = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0xd1, 0x6e, 0x12, 0x41,
	0x14, 0x2d, 0x85, 0x2d, 0xcb, 0xa5, 0xd4, 0x75, 0xaa, 0x09, 0xc6, 0xa6, 0xad, 0x9b, 0x98, 0x18,
	0x63, 0x80, 0x42, 0x2b, 0x90, 0xf8, 0xb2, 0x25, 0x6d, 0x9a, 0xb4, 0xb4, 0x64, 0x0a, 0x0f, 0xbe,
	0x38, 0x99, 0xee, 0xce, 0xc2, 0x0a, 0xbb, 0x43, 0x97, 0x69, 0x2b, 0x3f, 0xe0, 0x37, 0xf8, 0x3d,
	0x3e, 0xf9, 0xe8, 0x27, 0x18, 0xfd, 0x11, 0x67, 0x66, 0x17, 0xf0, 0x41, 0x7d, 0xd8, 0xcc, 0x9c,
	0x7b, 0xcf, 0x3d, 0xe7, 0xde, 0xcb, 0x00, 0xc7, 0xc3, 0x40, 0x8c, 0xee, 0x6e, 0x2a, 0x2e, 0x0f,
	0xab, 0xfd, 0x11, 0xeb, 0x8f, 0x82, 0x68, 0x38, 0xbb, 0x64, 0xe2, 0x81, 0xc7, 0xe3, 0xaa, 0x10,
	0x51, 0x95, 0x4e, 0x83, 0xea, 0x34, 0xe6, 0x82, 0xbb, 0x7c, 0x52, 0x9d, 0xf0, 0x98, 0x3e, 0xd0,
	0x68, 0x71, 0x56, 0x74, 0x02, 0xe5, 0x53, 0x68, 0x7f, 0xcd, 0x80, 0xd9, 0x65, 0x82, 0x7a, 0x54,
	0x50, 0xf4, 0x0e, 0x20, 0xe4, 0xde, 0xdd, 0x84, 0x8a, 0x80, 0x47, 0xe5, 0xe2, 0x7e, 0xe6, 0xd5,
	0x56, 0x7d, 0xa7, 0xb2, 0xa8, 0x5c, 0xd0, 0x2a, 0xdd, 0x25, 0x07, 0xff, 0xc1, 0x47, 0xcf, 0xa1,
	0xa0, 0xd2, 0x24, 0xa6, 0x82, 0x95, 0x37, 0x65, 0x71, 0x01, 0x9b, 0x2a, 0x80, 0x25, 0x46, 0xcf,
	0xc0, 0xbc, 0x09, 0x44, 0x92, 0x2b, 0xc9, 0x5c, 0x09, 0xe7, 0x25, 0xd6, 0xa9, 0x3d, 0x28, 0xba,
	0xdc, 0x93, 0x43, 0x24, 0xd9, 0x2d, 0x5d, 0x09, 0x49, 0x48, 0x11, 0xec, 0x3d, 0x80, 0x95, 0x25,
	0x32, 0x21, 0x77, 0x71, 0x85, 0x1d, 0x6b, 0x0d, 0xe5, 0x21, 0x7b, 0x7a, 0x7d, 0x6e, 0x65, 0xec,
	0x37, 0xf0, 0xa8, 0xff, 0xa9, 0xc3, 0x23, 0x3f, 0x18, 0xde, 0xc5, 0x09, 0x4b, 0xfa, 0x79, 0xec,
	0x9e, 0x50, 0xcf, 0x8b, 0xcb, 0x19, 0xa9, 0xb8, 0x89, 0xf3, 0x12, 0x3b, 0x12, 0xda, 0x04, 0x90,
	0xe3, 0x8a, 0xe0, 0x5e, 0x13, 0x97, 0xb3, 0xff, 0xbb, 0x00, 0x55, 0x60, 0x3b, 0x4a, 0xd6, 0x4b,
	0x66, 0x6c, 0x36, 0x93, 0x55, 0x64, 0xcc, 0xe6, 0xe5, 0x75, 0xcd, 0x7a, 0x9c, 0xa6, 0xae, 0x93,
	0xcc, 0x39, 0x9b, 0xdb, 0x0f, 0x00, 0xbd, 0xb3, 0xf7, 0x3d, 0x3a, 0x9f, 0x70, 0xea, 0xa1, 0x17,
	0x90, 0x0b, 0x47, 0xa9, 0x68, 0xb1, 0x5e, 0x5a, 0xad, 0xf3, 0xcc, 0x8b, 0xb1, 0x4e, 0xa1, 0x43,
	0x28, 0x76, 0x9d, 0x0e, 0x99, 0x26, 0x15, 0x5a, 0xb8, 0x58, 0xdf, 0x5e, 0x31, 0x9d, 0x4e, 0x2a,
	0x26, 0xf7, 0xbd, 0xbc, 0x23, 0x0b, 0xb2, 0x61, 0xe0, 0x96, 0xb3, 0xba, 0x0d, 0x75, 0xb5, 0x1b,
	0x90, 0x53, 0xaa, 0xe8, 0x29, 0x6c, 0x84, 0x44, 0xcc, 0xa7, 0x4c, 0x9b, 0x96, 0xb0, 0x11, 0xf6,
	0x25, 0x40, 0x4f, 0xc0, 0x08, 0xe9, 0x47, 0x1e, 0x6b, 0x03, 0x15, 0x55, 0xc0, 0x1e, 0xc9, 0xed,
	0xae, 0x44, 0x6d, 0x30, 0x7c, 0xf2, 0xb7, 0x76, 0x4f, 0x75, 0xbb, 0x7e, 0x2a, 0xef, 0x93, 0x29,
	0x8f, 0xc5, 0x42, 0xc8, 0xef, 0x49, 0xa0, 0x7e, 0xc7, 0x53, 0xdc, 0x5d, 0x4e, 0x91, 0xf4, 0x05,
	0x3e, 0xee, 0xa6, 0xda, 0xb6, 0x80, 0x9c, 0x52, 0xf9, 0xdf, 0xaa, 0x5f, 0x2a, 0x69, 0x57, 0xc4,
	0x93, 0x74, 0x09, 0x5b, 0x2b, 0xff, 0x8e, 0x8c, 0x4a, 0x2b, 0x75, 0xa0, 0x6d, 0xd5, 0xa5, 0x1b,
	0x09, 0x6d, 0x52, 0x92, 0x6d, 0x75, 0x22, 0x91, 0xb4, 0xc5, 0xa7, 0x62, 0x56, 0xce, 0xed, 0x67,
	0xa5, 0xa8, 0xe1, 0x5f, 0x49, 0x60, 0x7f, 0xce, 0x80, 0xa1, 0x8b, 0xd5, 0xc2, 0x68, 0x6a, 0x69,
	0x62, 0x75, 0x45, 0xbb, 0x50, 0x94, 0x07, 0xa1, 0xee, 0x98, 0xc4, 0xec, 0x56, 0x7b, 0x9a, 0xb8,
	0x20, 0x43, 0x8e, 0x3b, 0xc6, 0xec, 0x56, 0x57, 0xb8, 0x63, 0xed, 0xa2, 0x2a, 0xdc, 0xb1, 0x7a,
	0xe4, 0x72, 0x76, 0x16, 0xa9, 0xc7, 0x29, 0x7d, 0x54, 0xdc, 0xf4, 0x7b, 0x09, 0x46, 0x3b, 0x00,
	0x49, 0x07, 0x64, 0xc2, 0xa2, 0xb2, 0xa1, 0x47, 0x33, 0x75, 0x17, 0x17, 0x2c, 0x7a, 0xfd, 0x01,
	0x36, 0x30, 0x1b, 0xaa, 0xc7, 0x59, 0x82, 0xc2, 0xc9, 0xa0, 0xf5, 0xb6, 0x41, 0x5a, 0xcd, 0x9a,
	0x7c, 0xc7, 0x12, 0x0e, 0xae, 0xdb, 0xb5, 0x3a, 0x69, 0xd7, 0x5b, 0x56, 0x46, 0xc1, 0xce, 0x65,
	0xb3, 0xd9, 0x26, 0xcd, 0x56, 0xd3, 0x5a, 0x47, 0x05, 0x30, 0x4e, 0x06, 0x87, 0x8d, 0x86, 0x95,
	0x55, 0x19, 0x67, 0xd0, 0x3e, 0x38, 0xd2, 0xc4, 0x5c, 0x42, 0x3c, 0x6c, 0xd6, 0xc8, 0xd1, 0x41,
	0xcd, 0x32, 0x8e, 0xad, 0x6f, 0x3f, 0x77, 0x33, 0xdf, 0xe5, 0xf7, 0x43, 0x7e, 0x5f, 0x7e, 0xed,
	0xae, 0xdd, 0x6c, 0xe8, 0x3f, 0x7b, 0xe3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0xdb, 0x21,
	0xc6, 0x32, 0x04, 0x00, 0x00,
}
