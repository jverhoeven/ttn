// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/gateway/semtech/semtech.proto
// DO NOT EDIT!

/*
	Package semtech is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/ttn/api/gateway/semtech/semtech.proto

	It has these top-level messages:
		RxMetadata
		TxConfiguration
		StatusMessage
*/
package semtech

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import lorawan "github.com/TheThingsNetwork/ttn/api/protocol/lorawan"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type RxMetadata struct {
	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RfChain   uint32 `protobuf:"varint,11,opt,name=rf_chain,json=rfChain,proto3" json:"rf_chain,omitempty"`
	Channel   uint32 `protobuf:"varint,12,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *RxMetadata) Reset()                    { *m = RxMetadata{} }
func (m *RxMetadata) String() string            { return proto.CompactTextString(m) }
func (*RxMetadata) ProtoMessage()               {}
func (*RxMetadata) Descriptor() ([]byte, []int) { return fileDescriptorSemtech, []int{0} }

type TxConfiguration struct {
	Timestamp             uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RfChain               uint32 `protobuf:"varint,11,opt,name=rf_chain,json=rfChain,proto3" json:"rf_chain,omitempty"`
	PolarizationInversion bool   `protobuf:"varint,21,opt,name=polarization_inversion,json=polarizationInversion,proto3" json:"polarization_inversion,omitempty"`
	FrequencyDeviation    uint32 `protobuf:"varint,22,opt,name=frequency_deviation,json=frequencyDeviation,proto3" json:"frequency_deviation,omitempty"`
}

func (m *TxConfiguration) Reset()                    { *m = TxConfiguration{} }
func (m *TxConfiguration) String() string            { return proto.CompactTextString(m) }
func (*TxConfiguration) ProtoMessage()               {}
func (*TxConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorSemtech, []int{1} }

type StatusMessage struct {
	Region lorawan.Region `protobuf:"varint,13,opt,name=region,proto3,enum=lorawan.Region" json:"region,omitempty"`
}

func (m *StatusMessage) Reset()                    { *m = StatusMessage{} }
func (m *StatusMessage) String() string            { return proto.CompactTextString(m) }
func (*StatusMessage) ProtoMessage()               {}
func (*StatusMessage) Descriptor() ([]byte, []int) { return fileDescriptorSemtech, []int{2} }

func init() {
	proto.RegisterType((*RxMetadata)(nil), "semtech.RxMetadata")
	proto.RegisterType((*TxConfiguration)(nil), "semtech.TxConfiguration")
	proto.RegisterType((*StatusMessage)(nil), "semtech.StatusMessage")
}
func (m *RxMetadata) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RxMetadata) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSemtech(data, i, uint64(m.Timestamp))
	}
	if m.RfChain != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintSemtech(data, i, uint64(m.RfChain))
	}
	if m.Channel != 0 {
		data[i] = 0x60
		i++
		i = encodeVarintSemtech(data, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *TxConfiguration) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TxConfiguration) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSemtech(data, i, uint64(m.Timestamp))
	}
	if m.RfChain != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintSemtech(data, i, uint64(m.RfChain))
	}
	if m.PolarizationInversion {
		data[i] = 0xa8
		i++
		data[i] = 0x1
		i++
		if m.PolarizationInversion {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.FrequencyDeviation != 0 {
		data[i] = 0xb0
		i++
		data[i] = 0x1
		i++
		i = encodeVarintSemtech(data, i, uint64(m.FrequencyDeviation))
	}
	return i, nil
}

func (m *StatusMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Region != 0 {
		data[i] = 0x68
		i++
		i = encodeVarintSemtech(data, i, uint64(m.Region))
	}
	return i, nil
}

func encodeFixed64Semtech(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Semtech(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSemtech(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *RxMetadata) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovSemtech(uint64(m.Timestamp))
	}
	if m.RfChain != 0 {
		n += 1 + sovSemtech(uint64(m.RfChain))
	}
	if m.Channel != 0 {
		n += 1 + sovSemtech(uint64(m.Channel))
	}
	return n
}

func (m *TxConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovSemtech(uint64(m.Timestamp))
	}
	if m.RfChain != 0 {
		n += 1 + sovSemtech(uint64(m.RfChain))
	}
	if m.PolarizationInversion {
		n += 3
	}
	if m.FrequencyDeviation != 0 {
		n += 2 + sovSemtech(uint64(m.FrequencyDeviation))
	}
	return n
}

func (m *StatusMessage) Size() (n int) {
	var l int
	_ = l
	if m.Region != 0 {
		n += 1 + sovSemtech(uint64(m.Region))
	}
	return n
}

func sovSemtech(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSemtech(x uint64) (n int) {
	return sovSemtech(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RxMetadata) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSemtech
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSemtech
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RfChain", wireType)
			}
			m.RfChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSemtech
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RfChain |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSemtech
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSemtech(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSemtech
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxConfiguration) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSemtech
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSemtech
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RfChain", wireType)
			}
			m.RfChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSemtech
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RfChain |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolarizationInversion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSemtech
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolarizationInversion = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyDeviation", wireType)
			}
			m.FrequencyDeviation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSemtech
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FrequencyDeviation |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSemtech(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSemtech
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSemtech
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSemtech
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Region |= (lorawan.Region(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSemtech(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSemtech
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSemtech(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSemtech
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSemtech
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSemtech
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSemtech
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSemtech
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSemtech(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSemtech = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSemtech   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorSemtech = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x90, 0x3d, 0x4e, 0xc3, 0x40,
	0x10, 0x85, 0x71, 0x93, 0x84, 0x85, 0x10, 0x64, 0x94, 0xc8, 0x20, 0x14, 0xa1, 0x34, 0x50, 0x65,
	0x25, 0x10, 0x12, 0x2d, 0x09, 0x0d, 0x45, 0x28, 0x4c, 0x7a, 0x6b, 0xe2, 0x8c, 0xed, 0x15, 0xf6,
	0xae, 0xd9, 0x1d, 0xe7, 0x87, 0x93, 0x70, 0x0e, 0x4e, 0x41, 0xc9, 0x11, 0x10, 0x5c, 0x04, 0x67,
	0x13, 0x03, 0x25, 0xa2, 0x18, 0x8d, 0xdf, 0xfb, 0xfc, 0xde, 0x4a, 0xc3, 0xae, 0x63, 0x41, 0x49,
	0x31, 0xe9, 0x87, 0x2a, 0xe3, 0xe3, 0x04, 0xc7, 0x89, 0x90, 0xb1, 0xb9, 0x43, 0x9a, 0x2b, 0xfd,
	0xc0, 0x89, 0x24, 0x87, 0x5c, 0xf0, 0x18, 0x08, 0xe7, 0xb0, 0xe4, 0x06, 0x33, 0xc2, 0x30, 0xa9,
	0x76, 0x3f, 0xd7, 0x8a, 0x94, 0x5b, 0xdf, 0xc8, 0xa3, 0xc1, 0x5f, 0xba, 0x6c, 0x26, 0x54, 0x29,
	0x4f, 0x95, 0x86, 0x39, 0xc8, 0x6a, 0xaf, 0xcb, 0x7a, 0x01, 0x63, 0xfe, 0x62, 0x84, 0x04, 0x53,
	0x20, 0x70, 0x8f, 0xd9, 0x36, 0x89, 0x0c, 0x0d, 0x41, 0x96, 0x7b, 0xce, 0x89, 0x73, 0xd6, 0xf4,
	0x7f, 0x0c, 0xf7, 0x90, 0x35, 0x74, 0x14, 0x84, 0x09, 0x08, 0xe9, 0xed, 0x58, 0x58, 0xd7, 0xd1,
	0x70, 0x25, 0x5d, 0x8f, 0xd5, 0x4b, 0x5f, 0x4a, 0x4c, 0xbd, 0xdd, 0x35, 0xd9, 0xc8, 0xde, 0x8b,
	0xc3, 0x5a, 0xe3, 0xc5, 0x50, 0xc9, 0x48, 0xc4, 0x85, 0x06, 0x12, 0x4a, 0xfe, 0xff, 0x99, 0x4b,
	0xd6, 0xc9, 0x55, 0x0a, 0x5a, 0x3c, 0xd9, 0xa2, 0x40, 0xc8, 0x19, 0x6a, 0x53, 0x7e, 0x79, 0xed,
	0xf2, 0xc7, 0x86, 0xdf, 0xfe, 0x4d, 0x6f, 0x2b, 0xe8, 0x72, 0x76, 0x10, 0x69, 0x7c, 0x2c, 0x50,
	0x86, 0xcb, 0x60, 0x8a, 0x33, 0x61, 0xb9, 0xd7, 0xb1, 0xe5, 0xee, 0x37, 0xba, 0xa9, 0x48, 0xef,
	0x8a, 0x35, 0xef, 0x09, 0xa8, 0x30, 0x23, 0x34, 0x06, 0x62, 0x74, 0x4f, 0x59, 0x4d, 0x63, 0xbc,
	0x0a, 0x35, 0xcb, 0xd0, 0xde, 0x79, 0xab, 0x5f, 0x9d, 0xd1, 0xb7, 0xb6, 0xbf, 0xc1, 0x83, 0xfd,
	0xd7, 0x8f, 0xae, 0xf3, 0x56, 0xce, 0x7b, 0x39, 0xcf, 0x9f, 0xdd, 0xad, 0x49, 0xcd, 0x1e, 0xfa,
	0xe2, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xca, 0xef, 0x4e, 0xfa, 0x01, 0x00, 0x00,
}
