syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "github.com/TheThingsNetwork/ttn/api/api.proto";
import "github.com/TheThingsNetwork/ttn/api/protocol/protocol.proto";
import "github.com/TheThingsNetwork/ttn/api/gateway/gateway.proto";

package router;

message SubscribeRequest {
  string gateway_id = 1;
}

message UplinkMessage {
  bytes                payload            = 1;
  protocol.RxMetadata  protocol_metadata  = 11;
  gateway.RxMetadata   gateway_metadata   = 12;
}

message DownlinkMessage {
  bytes                     payload                 = 1;
  protocol.TxConfiguration  protocol_configuration  = 11;
  gateway.TxConfiguration   gateway_configuration   = 12;
}

message DeviceActivationRequest {
  bytes                payload            = 1;
  bytes                dev_eui            = 11 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI"];
  bytes                app_eui            = 12 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI"];
  protocol.RxMetadata  protocol_metadata  = 21;
  gateway.RxMetadata   gateway_metadata   = 22;
}

message DeviceActivationResponse {
  bytes                     payload                 = 1;
  protocol.TxConfiguration  protocol_configuration  = 11;
  gateway.TxConfiguration   gateway_configuration   = 12;
}

// The Router service provides pure network functionality
service Router {
  // Gateway streams status messages to Router
  rpc GatewayStatus(stream gateway.Status) returns (api.Ack);

  // Gateway streams uplink messages to Router
  rpc Uplink(stream UplinkMessage) returns (api.Ack);

  // Gateway subscribes to downlink messages from Router
  rpc Subscribe(SubscribeRequest) returns (stream DownlinkMessage);

  // Gateway requests device activation
  rpc Activate(DeviceActivationRequest) returns (DeviceActivationResponse);
}

// message GatewaysRequest is used to list all Gateways on this Router
message GatewaysRequest {}

// message GatewaysResponse is the response to the GatewaysRequest
message GatewaysResponse {
  repeated bytes gateway_ids = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.GatewayEUI"];
}

// message RegisterGatewayRequest is used to register a Gateway with this Router
message RegisterGatewayRequest {
  bytes gateway_eui = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.GatewayEUI"];
}

// message UnregisterGatewayRequest is used to unregister a Gateway from this
// Router
message UnregisterGatewayRequest {
  bytes gateway_eui = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.GatewayEUI"];
}

// message GatewayStatusRequest is used to request the status of a gateway from
// this Router
message GatewayStatusRequest {
  bytes gateway_eui = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.GatewayEUI"];
}

// message GatewayStatusResponse is the response to the GatewayStatusRequest
message GatewayStatusResponse {
  gateway.Status last_status = 1;
}

// message StatusRequest is used to request the status of this Router
message StatusRequest {}

// message Status is the response to the StatusRequest
message Status {
  // Gateways
  api.Rates gateway_status   = 1;
  uint32    active_gateways  = 4;

  // Uplink
  api.Rates uplink = 11;

  // Downlink
  api.Rates downlink = 21;

  // Activations
  api.Rates activations = 31;
  api.Rates activations_accepted = 32;

  // Connections
  uint32  connected_gateways  = 41;
  uint32  connected_brokers   = 42;
}

// The RouterManager service provides configuration and monitoring functionality
service RouterManager {
  // Network operator requests list of Gateways from Router Manager
  rpc Gateways(GatewaysRequest) returns (GatewaysResponse);

  // Gateway owner or network operator registers Gateway with Router Manager
  rpc RegisterGateway(RegisterGatewayRequest) returns (api.Ack);

  // Gateway owner or network operator unregisters Gateway with Router Manager
  rpc UnregisterGateway(UnregisterGatewayRequest) returns (api.Ack);

  // Gateway owner or network operator requests Gateway status from Router Manager
  rpc GatewayStatus(GatewayStatusRequest) returns (GatewayStatusResponse);

  // Network operator requests Router status
  rpc GetStatus(StatusRequest) returns (Status);
}
