// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/router/router.proto
// DO NOT EDIT!

/*
	Package router is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/ttn/api/router/router.proto

	It has these top-level messages:
		SubscribeRequest
		UplinkMessage
		DownlinkMessage
		DeviceActivationRequest
		DeviceActivationResponse
		GatewaysRequest
		GatewaysResponse
		RegisterGatewayRequest
		UnregisterGatewayRequest
		GatewayStatusRequest
		GatewayStatusResponse
		StatusRequest
		StatusResponse
*/
package router

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/TheThingsNetwork/ttn/api"
import protocol "github.com/TheThingsNetwork/ttn/api/protocol"
import gateway "github.com/TheThingsNetwork/ttn/api/gateway"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SubscribeRequest struct {
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{0} }

type UplinkMessage struct {
	Payload          []byte               `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	ProtocolMetadata *protocol.RxMetadata `protobuf:"bytes,11,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata,omitempty"`
	GatewayMetadata  *gateway.RxMetadata  `protobuf:"bytes,12,opt,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata,omitempty"`
}

func (m *UplinkMessage) Reset()                    { *m = UplinkMessage{} }
func (m *UplinkMessage) String() string            { return proto.CompactTextString(m) }
func (*UplinkMessage) ProtoMessage()               {}
func (*UplinkMessage) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{1} }

func (m *UplinkMessage) GetProtocolMetadata() *protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return nil
}

func (m *UplinkMessage) GetGatewayMetadata() *gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return nil
}

type DownlinkMessage struct {
	Payload               []byte                    `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	ProtocolConfiguration *protocol.TxConfiguration `protobuf:"bytes,11,opt,name=protocol_configuration,json=protocolConfiguration" json:"protocol_configuration,omitempty"`
	GatewayConfiguration  *gateway.TxConfiguration  `protobuf:"bytes,12,opt,name=gateway_configuration,json=gatewayConfiguration" json:"gateway_configuration,omitempty"`
}

func (m *DownlinkMessage) Reset()                    { *m = DownlinkMessage{} }
func (m *DownlinkMessage) String() string            { return proto.CompactTextString(m) }
func (*DownlinkMessage) ProtoMessage()               {}
func (*DownlinkMessage) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{2} }

func (m *DownlinkMessage) GetProtocolConfiguration() *protocol.TxConfiguration {
	if m != nil {
		return m.ProtocolConfiguration
	}
	return nil
}

func (m *DownlinkMessage) GetGatewayConfiguration() *gateway.TxConfiguration {
	if m != nil {
		return m.GatewayConfiguration
	}
	return nil
}

type DeviceActivationRequest struct {
	Payload          []byte               `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	DevEui           []byte               `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	AppEui           []byte               `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3" json:"app_eui,omitempty"`
	ProtocolMetadata *protocol.RxMetadata `protobuf:"bytes,21,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata,omitempty"`
	GatewayMetadata  *gateway.RxMetadata  `protobuf:"bytes,22,opt,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata,omitempty"`
}

func (m *DeviceActivationRequest) Reset()                    { *m = DeviceActivationRequest{} }
func (m *DeviceActivationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeviceActivationRequest) ProtoMessage()               {}
func (*DeviceActivationRequest) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{3} }

func (m *DeviceActivationRequest) GetProtocolMetadata() *protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return nil
}

func (m *DeviceActivationRequest) GetGatewayMetadata() *gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return nil
}

type DeviceActivationResponse struct {
	Payload               []byte                    `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	ProtocolConfiguration *protocol.TxConfiguration `protobuf:"bytes,11,opt,name=protocol_configuration,json=protocolConfiguration" json:"protocol_configuration,omitempty"`
	GatewayConfiguration  *gateway.TxConfiguration  `protobuf:"bytes,12,opt,name=gateway_configuration,json=gatewayConfiguration" json:"gateway_configuration,omitempty"`
}

func (m *DeviceActivationResponse) Reset()                    { *m = DeviceActivationResponse{} }
func (m *DeviceActivationResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceActivationResponse) ProtoMessage()               {}
func (*DeviceActivationResponse) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{4} }

func (m *DeviceActivationResponse) GetProtocolConfiguration() *protocol.TxConfiguration {
	if m != nil {
		return m.ProtocolConfiguration
	}
	return nil
}

func (m *DeviceActivationResponse) GetGatewayConfiguration() *gateway.TxConfiguration {
	if m != nil {
		return m.GatewayConfiguration
	}
	return nil
}

// message GatewaysRequest is used to list all Gateways on this Router
type GatewaysRequest struct {
}

func (m *GatewaysRequest) Reset()                    { *m = GatewaysRequest{} }
func (m *GatewaysRequest) String() string            { return proto.CompactTextString(m) }
func (*GatewaysRequest) ProtoMessage()               {}
func (*GatewaysRequest) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{5} }

// message GatewaysResponse is the response to the GatewaysRequest
type GatewaysResponse struct {
	GatewayIds []string `protobuf:"bytes,1,rep,name=gateway_ids,json=gatewayIds" json:"gateway_ids,omitempty"`
}

func (m *GatewaysResponse) Reset()                    { *m = GatewaysResponse{} }
func (m *GatewaysResponse) String() string            { return proto.CompactTextString(m) }
func (*GatewaysResponse) ProtoMessage()               {}
func (*GatewaysResponse) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{6} }

// message RegisterGatewayRequest is used to register a Gateway with this Router
type RegisterGatewayRequest struct {
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (m *RegisterGatewayRequest) Reset()                    { *m = RegisterGatewayRequest{} }
func (m *RegisterGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterGatewayRequest) ProtoMessage()               {}
func (*RegisterGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{7} }

// message UnregisterGatewayRequest is used to unregister a Gateway from this
// Router
type UnregisterGatewayRequest struct {
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (m *UnregisterGatewayRequest) Reset()                    { *m = UnregisterGatewayRequest{} }
func (m *UnregisterGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*UnregisterGatewayRequest) ProtoMessage()               {}
func (*UnregisterGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{8} }

// message GatewayStatusRequest is used to request the status of a gateway from
// this Router
type GatewayStatusRequest struct {
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (m *GatewayStatusRequest) Reset()                    { *m = GatewayStatusRequest{} }
func (m *GatewayStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GatewayStatusRequest) ProtoMessage()               {}
func (*GatewayStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{9} }

// message GatewayStatusResponse is the response to the GatewayStatusRequest
type GatewayStatusResponse struct {
	LastStatus *gateway.StatusMessage `protobuf:"bytes,1,opt,name=last_status,json=lastStatus" json:"last_status,omitempty"`
}

func (m *GatewayStatusResponse) Reset()                    { *m = GatewayStatusResponse{} }
func (m *GatewayStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GatewayStatusResponse) ProtoMessage()               {}
func (*GatewayStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{10} }

func (m *GatewayStatusResponse) GetLastStatus() *gateway.StatusMessage {
	if m != nil {
		return m.LastStatus
	}
	return nil
}

// message StatusRequest is used to request the status of this Router
type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{11} }

// message StatusResponse is the response to the StatusRequest
type StatusResponse struct {
	// Gateways
	GatewayStatus  *api.Rates `protobuf:"bytes,1,opt,name=gateway_status,json=gatewayStatus" json:"gateway_status,omitempty"`
	ActiveGateways uint32     `protobuf:"varint,4,opt,name=active_gateways,json=activeGateways,proto3" json:"active_gateways,omitempty"`
	// Uplink
	Uplink *api.Rates `protobuf:"bytes,11,opt,name=uplink" json:"uplink,omitempty"`
	// Downlink
	Downlink *api.Rates `protobuf:"bytes,21,opt,name=downlink" json:"downlink,omitempty"`
	// Activations
	Activations         *api.Rates `protobuf:"bytes,31,opt,name=activations" json:"activations,omitempty"`
	ActivationsAccepted *api.Rates `protobuf:"bytes,32,opt,name=activations_accepted,json=activationsAccepted" json:"activations_accepted,omitempty"`
	// Connections
	ConnectedGateways uint32 `protobuf:"varint,41,opt,name=connected_gateways,json=connectedGateways,proto3" json:"connected_gateways,omitempty"`
	ConnectedBrokers  uint32 `protobuf:"varint,42,opt,name=connected_brokers,json=connectedBrokers,proto3" json:"connected_brokers,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{12} }

func (m *StatusResponse) GetGatewayStatus() *api.Rates {
	if m != nil {
		return m.GatewayStatus
	}
	return nil
}

func (m *StatusResponse) GetUplink() *api.Rates {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *StatusResponse) GetDownlink() *api.Rates {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func (m *StatusResponse) GetActivations() *api.Rates {
	if m != nil {
		return m.Activations
	}
	return nil
}

func (m *StatusResponse) GetActivationsAccepted() *api.Rates {
	if m != nil {
		return m.ActivationsAccepted
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "router.SubscribeRequest")
	proto.RegisterType((*UplinkMessage)(nil), "router.UplinkMessage")
	proto.RegisterType((*DownlinkMessage)(nil), "router.DownlinkMessage")
	proto.RegisterType((*DeviceActivationRequest)(nil), "router.DeviceActivationRequest")
	proto.RegisterType((*DeviceActivationResponse)(nil), "router.DeviceActivationResponse")
	proto.RegisterType((*GatewaysRequest)(nil), "router.GatewaysRequest")
	proto.RegisterType((*GatewaysResponse)(nil), "router.GatewaysResponse")
	proto.RegisterType((*RegisterGatewayRequest)(nil), "router.RegisterGatewayRequest")
	proto.RegisterType((*UnregisterGatewayRequest)(nil), "router.UnregisterGatewayRequest")
	proto.RegisterType((*GatewayStatusRequest)(nil), "router.GatewayStatusRequest")
	proto.RegisterType((*GatewayStatusResponse)(nil), "router.GatewayStatusResponse")
	proto.RegisterType((*StatusRequest)(nil), "router.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "router.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Router service

type RouterClient interface {
	// Gateway streams status messages to Router
	GatewayStatus(ctx context.Context, opts ...grpc.CallOption) (Router_GatewayStatusClient, error)
	// Gateway streams uplink messages to Router
	Uplink(ctx context.Context, opts ...grpc.CallOption) (Router_UplinkClient, error)
	// Gateway subscribes to downlink messages from Router
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Router_SubscribeClient, error)
	// Gateway requests device activation
	Activate(ctx context.Context, in *DeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) GatewayStatus(ctx context.Context, opts ...grpc.CallOption) (Router_GatewayStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Router_serviceDesc.Streams[0], c.cc, "/router.Router/GatewayStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerGatewayStatusClient{stream}
	return x, nil
}

type Router_GatewayStatusClient interface {
	Send(*gateway.StatusMessage) error
	CloseAndRecv() (*api.Ack, error)
	grpc.ClientStream
}

type routerGatewayStatusClient struct {
	grpc.ClientStream
}

func (x *routerGatewayStatusClient) Send(m *gateway.StatusMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerGatewayStatusClient) CloseAndRecv() (*api.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) Uplink(ctx context.Context, opts ...grpc.CallOption) (Router_UplinkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Router_serviceDesc.Streams[1], c.cc, "/router.Router/Uplink", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerUplinkClient{stream}
	return x, nil
}

type Router_UplinkClient interface {
	Send(*UplinkMessage) error
	CloseAndRecv() (*api.Ack, error)
	grpc.ClientStream
}

type routerUplinkClient struct {
	grpc.ClientStream
}

func (x *routerUplinkClient) Send(m *UplinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerUplinkClient) CloseAndRecv() (*api.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Router_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Router_serviceDesc.Streams[2], c.cc, "/router.Router/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_SubscribeClient interface {
	Recv() (*DownlinkMessage, error)
	grpc.ClientStream
}

type routerSubscribeClient struct {
	grpc.ClientStream
}

func (x *routerSubscribeClient) Recv() (*DownlinkMessage, error) {
	m := new(DownlinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) Activate(ctx context.Context, in *DeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error) {
	out := new(DeviceActivationResponse)
	err := grpc.Invoke(ctx, "/router.Router/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Router service

type RouterServer interface {
	// Gateway streams status messages to Router
	GatewayStatus(Router_GatewayStatusServer) error
	// Gateway streams uplink messages to Router
	Uplink(Router_UplinkServer) error
	// Gateway subscribes to downlink messages from Router
	Subscribe(*SubscribeRequest, Router_SubscribeServer) error
	// Gateway requests device activation
	Activate(context.Context, *DeviceActivationRequest) (*DeviceActivationResponse, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_GatewayStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).GatewayStatus(&routerGatewayStatusServer{stream})
}

type Router_GatewayStatusServer interface {
	SendAndClose(*api.Ack) error
	Recv() (*gateway.StatusMessage, error)
	grpc.ServerStream
}

type routerGatewayStatusServer struct {
	grpc.ServerStream
}

func (x *routerGatewayStatusServer) SendAndClose(m *api.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerGatewayStatusServer) Recv() (*gateway.StatusMessage, error) {
	m := new(gateway.StatusMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Router_Uplink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).Uplink(&routerUplinkServer{stream})
}

type Router_UplinkServer interface {
	SendAndClose(*api.Ack) error
	Recv() (*UplinkMessage, error)
	grpc.ServerStream
}

type routerUplinkServer struct {
	grpc.ServerStream
}

func (x *routerUplinkServer) SendAndClose(m *api.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerUplinkServer) Recv() (*UplinkMessage, error) {
	m := new(UplinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Router_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).Subscribe(m, &routerSubscribeServer{stream})
}

type Router_SubscribeServer interface {
	Send(*DownlinkMessage) error
	grpc.ServerStream
}

type routerSubscribeServer struct {
	grpc.ServerStream
}

func (x *routerSubscribeServer) Send(m *DownlinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RouterServer).Activate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "router.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _Router_Activate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GatewayStatus",
			Handler:       _Router_GatewayStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Uplink",
			Handler:       _Router_Uplink_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Router_Subscribe_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for RouterManager service

type RouterManagerClient interface {
	// Network operator requests list of Gateways from Router Manager
	Gateways(ctx context.Context, in *GatewaysRequest, opts ...grpc.CallOption) (*GatewaysResponse, error)
	// Gateway owner or network operator registers Gateway with Router Manager
	RegisterGateway(ctx context.Context, in *RegisterGatewayRequest, opts ...grpc.CallOption) (*api.Ack, error)
	// Gateway owner or network operator unregisters Gateway with Router Manager
	UnregisterGateway(ctx context.Context, in *UnregisterGatewayRequest, opts ...grpc.CallOption) (*api.Ack, error)
	// Gateway owner or network operator requests Gateway status from Router Manager
	GatewayStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*GatewayStatusResponse, error)
	// Network operator requests Router status
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type routerManagerClient struct {
	cc *grpc.ClientConn
}

func NewRouterManagerClient(cc *grpc.ClientConn) RouterManagerClient {
	return &routerManagerClient{cc}
}

func (c *routerManagerClient) Gateways(ctx context.Context, in *GatewaysRequest, opts ...grpc.CallOption) (*GatewaysResponse, error) {
	out := new(GatewaysResponse)
	err := grpc.Invoke(ctx, "/router.RouterManager/Gateways", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerManagerClient) RegisterGateway(ctx context.Context, in *RegisterGatewayRequest, opts ...grpc.CallOption) (*api.Ack, error) {
	out := new(api.Ack)
	err := grpc.Invoke(ctx, "/router.RouterManager/RegisterGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerManagerClient) UnregisterGateway(ctx context.Context, in *UnregisterGatewayRequest, opts ...grpc.CallOption) (*api.Ack, error) {
	out := new(api.Ack)
	err := grpc.Invoke(ctx, "/router.RouterManager/UnregisterGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerManagerClient) GatewayStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*GatewayStatusResponse, error) {
	out := new(GatewayStatusResponse)
	err := grpc.Invoke(ctx, "/router.RouterManager/GatewayStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerManagerClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/router.RouterManager/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouterManager service

type RouterManagerServer interface {
	// Network operator requests list of Gateways from Router Manager
	Gateways(context.Context, *GatewaysRequest) (*GatewaysResponse, error)
	// Gateway owner or network operator registers Gateway with Router Manager
	RegisterGateway(context.Context, *RegisterGatewayRequest) (*api.Ack, error)
	// Gateway owner or network operator unregisters Gateway with Router Manager
	UnregisterGateway(context.Context, *UnregisterGatewayRequest) (*api.Ack, error)
	// Gateway owner or network operator requests Gateway status from Router Manager
	GatewayStatus(context.Context, *GatewayStatusRequest) (*GatewayStatusResponse, error)
	// Network operator requests Router status
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterRouterManagerServer(s *grpc.Server, srv RouterManagerServer) {
	s.RegisterService(&_RouterManager_serviceDesc, srv)
}

func _RouterManager_Gateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RouterManagerServer).Gateways(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RouterManager_RegisterGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegisterGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RouterManagerServer).RegisterGateway(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RouterManager_UnregisterGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnregisterGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RouterManagerServer).UnregisterGateway(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RouterManager_GatewayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RouterManagerServer).GatewayStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RouterManager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RouterManagerServer).Status(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RouterManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "router.RouterManager",
	HandlerType: (*RouterManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Gateways",
			Handler:    _RouterManager_Gateways_Handler,
		},
		{
			MethodName: "RegisterGateway",
			Handler:    _RouterManager_RegisterGateway_Handler,
		},
		{
			MethodName: "UnregisterGateway",
			Handler:    _RouterManager_UnregisterGateway_Handler,
		},
		{
			MethodName: "GatewayStatus",
			Handler:    _RouterManager_GatewayStatus_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _RouterManager_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *SubscribeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscribeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GatewayId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.GatewayId)))
		i += copy(data[i:], m.GatewayId)
	}
	return i, nil
}

func (m *UplinkMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UplinkMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.ProtocolMetadata != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintRouter(data, i, uint64(m.ProtocolMetadata.Size()))
		n1, err := m.ProtocolMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.GatewayMetadata != nil {
		data[i] = 0x62
		i++
		i = encodeVarintRouter(data, i, uint64(m.GatewayMetadata.Size()))
		n2, err := m.GatewayMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *DownlinkMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DownlinkMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.ProtocolConfiguration != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintRouter(data, i, uint64(m.ProtocolConfiguration.Size()))
		n3, err := m.ProtocolConfiguration.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.GatewayConfiguration != nil {
		data[i] = 0x62
		i++
		i = encodeVarintRouter(data, i, uint64(m.GatewayConfiguration.Size()))
		n4, err := m.GatewayConfiguration.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *DeviceActivationRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeviceActivationRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if len(m.DevEui) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.DevEui)))
		i += copy(data[i:], m.DevEui)
	}
	if len(m.AppEui) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.AppEui)))
		i += copy(data[i:], m.AppEui)
	}
	if m.ProtocolMetadata != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintRouter(data, i, uint64(m.ProtocolMetadata.Size()))
		n5, err := m.ProtocolMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.GatewayMetadata != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintRouter(data, i, uint64(m.GatewayMetadata.Size()))
		n6, err := m.GatewayMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *DeviceActivationResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeviceActivationResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.ProtocolConfiguration != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintRouter(data, i, uint64(m.ProtocolConfiguration.Size()))
		n7, err := m.ProtocolConfiguration.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.GatewayConfiguration != nil {
		data[i] = 0x62
		i++
		i = encodeVarintRouter(data, i, uint64(m.GatewayConfiguration.Size()))
		n8, err := m.GatewayConfiguration.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *GatewaysRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GatewaysRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GatewaysResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GatewaysResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GatewayIds) > 0 {
		for _, s := range m.GatewayIds {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *RegisterGatewayRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RegisterGatewayRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GatewayId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.GatewayId)))
		i += copy(data[i:], m.GatewayId)
	}
	return i, nil
}

func (m *UnregisterGatewayRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnregisterGatewayRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GatewayId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.GatewayId)))
		i += copy(data[i:], m.GatewayId)
	}
	return i, nil
}

func (m *GatewayStatusRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GatewayStatusRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GatewayId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.GatewayId)))
		i += copy(data[i:], m.GatewayId)
	}
	return i, nil
}

func (m *GatewayStatusResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GatewayStatusResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastStatus != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(m.LastStatus.Size()))
		n9, err := m.LastStatus.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatusResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GatewayStatus != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(m.GatewayStatus.Size()))
		n10, err := m.GatewayStatus.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ActiveGateways != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintRouter(data, i, uint64(m.ActiveGateways))
	}
	if m.Uplink != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintRouter(data, i, uint64(m.Uplink.Size()))
		n11, err := m.Uplink.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Downlink != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintRouter(data, i, uint64(m.Downlink.Size()))
		n12, err := m.Downlink.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Activations != nil {
		data[i] = 0xfa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintRouter(data, i, uint64(m.Activations.Size()))
		n13, err := m.Activations.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.ActivationsAccepted != nil {
		data[i] = 0x82
		i++
		data[i] = 0x2
		i++
		i = encodeVarintRouter(data, i, uint64(m.ActivationsAccepted.Size()))
		n14, err := m.ActivationsAccepted.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.ConnectedGateways != 0 {
		data[i] = 0xc8
		i++
		data[i] = 0x2
		i++
		i = encodeVarintRouter(data, i, uint64(m.ConnectedGateways))
	}
	if m.ConnectedBrokers != 0 {
		data[i] = 0xd0
		i++
		data[i] = 0x2
		i++
		i = encodeVarintRouter(data, i, uint64(m.ConnectedBrokers))
	}
	return i, nil
}

func encodeFixed64Router(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Router(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRouter(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *SubscribeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *UplinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.ProtocolMetadata != nil {
		l = m.ProtocolMetadata.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.GatewayMetadata != nil {
		l = m.GatewayMetadata.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *DownlinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.ProtocolConfiguration != nil {
		l = m.ProtocolConfiguration.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.GatewayConfiguration != nil {
		l = m.GatewayConfiguration.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *DeviceActivationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	l = len(m.DevEui)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	l = len(m.AppEui)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.ProtocolMetadata != nil {
		l = m.ProtocolMetadata.Size()
		n += 2 + l + sovRouter(uint64(l))
	}
	if m.GatewayMetadata != nil {
		l = m.GatewayMetadata.Size()
		n += 2 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *DeviceActivationResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.ProtocolConfiguration != nil {
		l = m.ProtocolConfiguration.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.GatewayConfiguration != nil {
		l = m.GatewayConfiguration.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *GatewaysRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GatewaysResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.GatewayIds) > 0 {
		for _, s := range m.GatewayIds {
			l = len(s)
			n += 1 + l + sovRouter(uint64(l))
		}
	}
	return n
}

func (m *RegisterGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *UnregisterGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *GatewayStatusRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *GatewayStatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.LastStatus != nil {
		l = m.LastStatus.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.GatewayStatus != nil {
		l = m.GatewayStatus.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.ActiveGateways != 0 {
		n += 1 + sovRouter(uint64(m.ActiveGateways))
	}
	if m.Uplink != nil {
		l = m.Uplink.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Downlink != nil {
		l = m.Downlink.Size()
		n += 2 + l + sovRouter(uint64(l))
	}
	if m.Activations != nil {
		l = m.Activations.Size()
		n += 2 + l + sovRouter(uint64(l))
	}
	if m.ActivationsAccepted != nil {
		l = m.ActivationsAccepted.Size()
		n += 2 + l + sovRouter(uint64(l))
	}
	if m.ConnectedGateways != 0 {
		n += 2 + sovRouter(uint64(m.ConnectedGateways))
	}
	if m.ConnectedBrokers != 0 {
		n += 2 + sovRouter(uint64(m.ConnectedBrokers))
	}
	return n
}

func sovRouter(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRouter(x uint64) (n int) {
	return sovRouter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolMetadata == nil {
				m.ProtocolMetadata = &protocol.RxMetadata{}
			}
			if err := m.ProtocolMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayMetadata == nil {
				m.GatewayMetadata = &gateway.RxMetadata{}
			}
			if err := m.GatewayMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolConfiguration == nil {
				m.ProtocolConfiguration = &protocol.TxConfiguration{}
			}
			if err := m.ProtocolConfiguration.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayConfiguration == nil {
				m.GatewayConfiguration = &gateway.TxConfiguration{}
			}
			if err := m.GatewayConfiguration.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceActivationRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEui = append(m.DevEui[:0], data[iNdEx:postIndex]...)
			if m.DevEui == nil {
				m.DevEui = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEui = append(m.AppEui[:0], data[iNdEx:postIndex]...)
			if m.AppEui == nil {
				m.AppEui = []byte{}
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolMetadata == nil {
				m.ProtocolMetadata = &protocol.RxMetadata{}
			}
			if err := m.ProtocolMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayMetadata == nil {
				m.GatewayMetadata = &gateway.RxMetadata{}
			}
			if err := m.GatewayMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceActivationResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolConfiguration == nil {
				m.ProtocolConfiguration = &protocol.TxConfiguration{}
			}
			if err := m.ProtocolConfiguration.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayConfiguration == nil {
				m.GatewayConfiguration = &gateway.TxConfiguration{}
			}
			if err := m.GatewayConfiguration.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewaysRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewaysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewaysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewaysResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewaysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewaysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayIds = append(m.GatewayIds, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterGatewayRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnregisterGatewayRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStatusRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStatusResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatus == nil {
				m.LastStatus = &gateway.StatusMessage{}
			}
			if err := m.LastStatus.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayStatus == nil {
				m.GatewayStatus = &api.Rates{}
			}
			if err := m.GatewayStatus.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveGateways", wireType)
			}
			m.ActiveGateways = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ActiveGateways |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uplink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uplink == nil {
				m.Uplink = &api.Rates{}
			}
			if err := m.Uplink.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Downlink == nil {
				m.Downlink = &api.Rates{}
			}
			if err := m.Downlink.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activations == nil {
				m.Activations = &api.Rates{}
			}
			if err := m.Activations.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationsAccepted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationsAccepted == nil {
				m.ActivationsAccepted = &api.Rates{}
			}
			if err := m.ActivationsAccepted.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedGateways", wireType)
			}
			m.ConnectedGateways = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ConnectedGateways |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedBrokers", wireType)
			}
			m.ConnectedBrokers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ConnectedBrokers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRouter(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRouter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRouter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRouter(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRouter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRouter   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorRouter = []byte{
	// 818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x55, 0x4d, 0x6f, 0xda, 0x48,
	0x18, 0x5e, 0x6f, 0x56, 0x84, 0xbc, 0x40, 0x80, 0x09, 0x10, 0x2f, 0xda, 0x7c, 0xc8, 0x87, 0xdd,
	0xec, 0x47, 0x60, 0x43, 0xb4, 0x8a, 0xa2, 0x68, 0xdb, 0x92, 0xa6, 0xaa, 0x2a, 0x95, 0x2a, 0x72,
	0x92, 0x33, 0x1a, 0xcc, 0x94, 0x58, 0x10, 0xdb, 0xf5, 0x8c, 0xf3, 0x71, 0xec, 0xbf, 0xe8, 0x8f,
	0xe8, 0x0f, 0xe9, 0xa1, 0x87, 0x4a, 0x55, 0xef, 0x55, 0x7b, 0xe9, 0x7f, 0xe8, 0xa5, 0x83, 0x67,
	0x3c, 0xd8, 0x26, 0x48, 0xb4, 0x3d, 0xf5, 0x60, 0xc1, 0x3c, 0xcf, 0xf3, 0xbe, 0x7e, 0x5f, 0xbf,
	0xf3, 0xcc, 0xc0, 0xde, 0xc0, 0x66, 0xe7, 0x41, 0xaf, 0x61, 0xb9, 0x17, 0xcd, 0xd3, 0x73, 0x72,
	0x7a, 0x6e, 0x3b, 0x03, 0xfa, 0x84, 0xb0, 0x2b, 0xd7, 0x1f, 0x36, 0x19, 0x73, 0x9a, 0xd8, 0xb3,
	0x9b, 0xbe, 0x1b, 0x30, 0xe2, 0xcb, 0x9f, 0x86, 0xe7, 0xbb, 0xcc, 0x45, 0x19, 0xb1, 0xaa, 0x6f,
	0xcf, 0x93, 0x80, 0x3f, 0x22, 0xac, 0x7e, 0x30, 0x8f, 0x3c, 0x94, 0x5a, 0xee, 0x48, 0xfd, 0x91,
	0xc1, 0xfb, 0xf3, 0x04, 0x0f, 0x30, 0x23, 0x57, 0xf8, 0x26, 0xfa, 0x15, 0xa1, 0xc6, 0x0e, 0x94,
	0x4e, 0x82, 0x1e, 0xb5, 0x7c, 0xbb, 0x47, 0x4c, 0xf2, 0x2c, 0x20, 0x94, 0xa1, 0x35, 0x00, 0x29,
	0xea, 0xda, 0x7d, 0x5d, 0xdb, 0xd4, 0xb6, 0x96, 0xcc, 0x25, 0x89, 0x3c, 0xea, 0x1b, 0x2f, 0x35,
	0x28, 0x9c, 0x79, 0x23, 0xdb, 0x19, 0x76, 0x08, 0xa5, 0x78, 0x40, 0x90, 0x0e, 0x8b, 0x1e, 0xbe,
	0x19, 0xb9, 0x58, 0xa8, 0xf3, 0x66, 0xb4, 0x44, 0x6d, 0x28, 0x47, 0xb5, 0x76, 0x2f, 0x08, 0xc3,
	0x7d, 0xcc, 0xb0, 0x9e, 0xe3, 0x9a, 0x5c, 0xab, 0xd2, 0x50, 0x5d, 0x98, 0xd7, 0x1d, 0xc9, 0x99,
	0xa5, 0x08, 0x8c, 0x10, 0x74, 0x07, 0x4a, 0x51, 0x35, 0x2a, 0x43, 0x3e, 0xcc, 0xb0, 0xd2, 0x88,
	0x7a, 0x89, 0x25, 0x28, 0x4a, 0x2c, 0x02, 0x8c, 0xd7, 0x1a, 0x14, 0x8f, 0xdc, 0x2b, 0x67, 0xbe,
	0x82, 0x8f, 0xa1, 0xa6, 0x0a, 0xb6, 0x5c, 0xe7, 0xa9, 0x3d, 0x08, 0x7c, 0xcc, 0x6c, 0xd7, 0x91,
	0x55, 0xff, 0x3a, 0xa9, 0xfa, 0xf4, 0xfa, 0x7e, 0x5c, 0x60, 0x56, 0x23, 0x26, 0x01, 0xa3, 0x0e,
	0x54, 0xa3, 0xfa, 0x93, 0x09, 0x45, 0x13, 0xba, 0x6a, 0x22, 0x9d, 0xaf, 0x22, 0x89, 0x04, 0x6a,
	0x7c, 0xd2, 0x60, 0xf5, 0x88, 0x5c, 0xda, 0x16, 0x69, 0x5b, 0xcc, 0xbe, 0x14, 0x52, 0x39, 0xb8,
	0xd9, 0x6d, 0xad, 0xc2, 0x62, 0x9f, 0x5c, 0x76, 0x49, 0x60, 0x87, 0x7d, 0xe4, 0xcd, 0x0c, 0x5f,
	0x3e, 0x08, 0xec, 0x31, 0x81, 0x3d, 0x2f, 0x24, 0xf2, 0x82, 0xe0, 0xcb, 0x31, 0x71, 0xeb, 0xe4,
	0xaa, 0xdf, 0x3d, 0xb9, 0xda, 0x57, 0x4c, 0xee, 0x9d, 0x06, 0xfa, 0x74, 0xab, 0xd4, 0x73, 0x1d,
	0xfa, 0x43, 0x8f, 0xb0, 0x0c, 0xc5, 0x87, 0x02, 0xa7, 0x72, 0x72, 0xc6, 0x2e, 0x94, 0x26, 0x90,
	0xec, 0x70, 0x03, 0x72, 0x13, 0x1b, 0x52, 0xde, 0xe5, 0x02, 0xf7, 0x21, 0x28, 0x1f, 0x52, 0x63,
	0x0f, 0x6a, 0x26, 0x19, 0xd8, 0x94, 0x1f, 0x37, 0x32, 0x78, 0x4e, 0x07, 0xef, 0x83, 0x7e, 0xe6,
	0xf8, 0xdf, 0x14, 0xfa, 0x1f, 0x54, 0x64, 0xc0, 0x09, 0xc3, 0x2c, 0xa0, 0x73, 0x86, 0x1d, 0x43,
	0x35, 0x15, 0x26, 0x9b, 0xdc, 0x83, 0xdc, 0x08, 0x53, 0xd6, 0xa5, 0x21, 0x1c, 0x06, 0xe6, 0x5a,
	0x35, 0xf5, 0x41, 0x85, 0x5a, 0xda, 0xd6, 0x84, 0xb1, 0x54, 0x40, 0x46, 0x11, 0x0a, 0x89, 0x0a,
	0x8c, 0xe7, 0x0b, 0xb0, 0x9c, 0x4a, 0xbe, 0x03, 0xcb, 0x51, 0x51, 0x89, 0xfc, 0xd0, 0x18, 0x1f,
	0xbc, 0x26, 0xa7, 0xa8, 0x59, 0x18, 0xc4, 0xeb, 0x42, 0x7f, 0x40, 0x11, 0x8f, 0x37, 0x1b, 0xe9,
	0x4a, 0x9c, 0xea, 0xbf, 0xf0, 0x98, 0x82, 0xb9, 0x2c, 0xe0, 0x68, 0x4a, 0xc8, 0x80, 0x4c, 0x10,
	0x1e, 0x82, 0x72, 0x57, 0xc5, 0x73, 0x4a, 0x06, 0xfd, 0x0e, 0xd9, 0xbe, 0x3c, 0x79, 0xa4, 0x75,
	0xe2, 0x2a, 0xc5, 0xa1, 0x7f, 0x20, 0x87, 0xd5, 0x0e, 0xa7, 0xfa, 0xc6, 0x94, 0x34, 0x4e, 0xa3,
	0xff, 0xa1, 0x12, 0x5b, 0x76, 0xb1, 0x65, 0x11, 0x8f, 0x91, 0xbe, 0xbe, 0x39, 0x15, 0xb6, 0x12,
	0xd3, 0xb5, 0xa5, 0x0c, 0x6d, 0x03, 0xe2, 0x9b, 0xd8, 0x21, 0x16, 0x5f, 0x4c, 0x9a, 0xfc, 0x33,
	0x6c, 0xb2, 0xac, 0x18, 0xd5, 0xe7, 0xdf, 0x30, 0x01, 0xbb, 0x3d, 0xdf, 0x1d, 0x12, 0x9f, 0xea,
	0x7f, 0x85, 0xea, 0x92, 0x22, 0x0e, 0x05, 0xde, 0xfa, 0xac, 0x41, 0xc6, 0x0c, 0xef, 0x3f, 0xb4,
	0x0b, 0x85, 0xc4, 0xc4, 0xd1, 0x8c, 0xa1, 0xd6, 0xb3, 0x61, 0xc1, 0x6d, 0x6b, 0xb8, 0xa5, 0xf1,
	0x97, 0x65, 0xc4, 0xcd, 0x82, 0xaa, 0x0d, 0x79, 0xab, 0x26, 0x6e, 0x9a, 0x84, 0xf8, 0x1e, 0x2c,
	0xa9, 0xab, 0x0b, 0xe9, 0x91, 0x3e, 0x7d, 0x9b, 0xd5, 0x57, 0x23, 0x26, 0x75, 0x09, 0xfc, 0xab,
	0x71, 0x5f, 0x67, 0xe5, 0xc9, 0xc2, 0xdd, 0xa6, 0x64, 0xb7, 0x1f, 0xae, 0xf5, 0xcd, 0xd9, 0x02,
	0xb1, 0xdd, 0x5a, 0x6f, 0x7f, 0x86, 0x82, 0xe8, 0xbe, 0x83, 0x1d, 0xfe, 0x06, 0x9f, 0x8f, 0x2a,
	0xab, 0x3e, 0xa4, 0xaa, 0x23, 0xe5, 0xfd, 0xba, 0x3e, 0x4d, 0xc8, 0xfd, 0x7b, 0x00, 0xc5, 0x94,
	0xc1, 0xd1, 0x7a, 0x24, 0xbe, 0xdd, 0xf9, 0x93, 0x0f, 0x84, 0xee, 0x42, 0x79, 0xca, 0xe4, 0x48,
	0x35, 0x31, 0xcb, 0xff, 0xb1, 0x04, 0x8f, 0xd3, 0x13, 0xfc, 0x2d, 0x55, 0x68, 0xc2, 0x7f, 0xf5,
	0xb5, 0x19, 0xac, 0x32, 0x7a, 0x46, 0xa6, 0x51, 0xa3, 0x4d, 0xc6, 0xd7, 0xd2, 0xb0, 0x08, 0x3c,
	0x2c, 0xbd, 0xfa, 0xb0, 0xae, 0xbd, 0xe1, 0xcf, 0x7b, 0xfe, 0xbc, 0xf8, 0xb8, 0xfe, 0x53, 0x2f,
	0x13, 0x9e, 0xd2, 0xbb, 0x5f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x79, 0xa9, 0x26, 0x5e, 0xa4, 0x09,
	0x00, 0x00,
}
