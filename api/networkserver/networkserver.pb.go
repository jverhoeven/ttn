// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/networkserver/networkserver.proto
// DO NOT EDIT!

/*
	Package networkserver is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/ttn/api/networkserver/networkserver.proto

	It has these top-level messages:
		DevicesRequest
		DevicesResponse
		RegisterDeviceRequest
		StatusRequest
		Status
*/
package networkserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/TheThingsNetwork/ttn/api"
import broker "github.com/TheThingsNetwork/ttn/api/broker"
import handler "github.com/TheThingsNetwork/ttn/api/handler"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type DevicesRequest struct {
	DevAddr *github_com_TheThingsNetwork_ttn_core_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr,omitempty"`
	FCnt    uint32                                              `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
}

func (m *DevicesRequest) Reset()                    { *m = DevicesRequest{} }
func (m *DevicesRequest) String() string            { return proto.CompactTextString(m) }
func (*DevicesRequest) ProtoMessage()               {}
func (*DevicesRequest) Descriptor() ([]byte, []int) { return fileDescriptorNetworkserver, []int{0} }

type DevicesResponse struct {
	Results []*DevicesResponse_Device `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *DevicesResponse) Reset()                    { *m = DevicesResponse{} }
func (m *DevicesResponse) String() string            { return proto.CompactTextString(m) }
func (*DevicesResponse) ProtoMessage()               {}
func (*DevicesResponse) Descriptor() ([]byte, []int) { return fileDescriptorNetworkserver, []int{1} }

func (m *DevicesResponse) GetResults() []*DevicesResponse_Device {
	if m != nil {
		return m.Results
	}
	return nil
}

type DevicesResponse_Device struct {
	AppEui           *github_com_TheThingsNetwork_ttn_core_types.AppEUI  `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui,omitempty"`
	DevEui           *github_com_TheThingsNetwork_ttn_core_types.DevEUI  `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui,omitempty"`
	NwkSKey          *github_com_TheThingsNetwork_ttn_core_types.NwkSKey `protobuf:"bytes,3,opt,name=nwk_s_key,json=nwkSKey,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.NwkSKey" json:"nwk_s_key,omitempty"`
	FCnt             uint32                                              `protobuf:"varint,4,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	DisableFCntCheck bool                                                `protobuf:"varint,11,opt,name=disable_f_cnt_check,json=disableFCntCheck,proto3" json:"disable_f_cnt_check,omitempty"`
	Uses32BitFCnt    bool                                                `protobuf:"varint,12,opt,name=uses32_bit_f_cnt,json=uses32BitFCnt,proto3" json:"uses32_bit_f_cnt,omitempty"`
}

func (m *DevicesResponse_Device) Reset()         { *m = DevicesResponse_Device{} }
func (m *DevicesResponse_Device) String() string { return proto.CompactTextString(m) }
func (*DevicesResponse_Device) ProtoMessage()    {}
func (*DevicesResponse_Device) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkserver, []int{1, 0}
}

// message RegisterDeviceRequest is used to register a device in the
// NetworkServer
type RegisterDeviceRequest struct {
}

func (m *RegisterDeviceRequest) Reset()         { *m = RegisterDeviceRequest{} }
func (m *RegisterDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterDeviceRequest) ProtoMessage()    {}
func (*RegisterDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkserver, []int{2}
}

// message StatusRequest is used to request the status of this NetworkServer
type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorNetworkserver, []int{3} }

// message Status is the response to the StatusRequest
type Status struct {
	// GetDevices histogram percentiles
	DevicesPerAddress *api.Percentiles `protobuf:"bytes,1,opt,name=devices_per_address,json=devicesPerAddress" json:"devices_per_address,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorNetworkserver, []int{4} }

func (m *Status) GetDevicesPerAddress() *api.Percentiles {
	if m != nil {
		return m.DevicesPerAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*DevicesRequest)(nil), "networkserver.DevicesRequest")
	proto.RegisterType((*DevicesResponse)(nil), "networkserver.DevicesResponse")
	proto.RegisterType((*DevicesResponse_Device)(nil), "networkserver.DevicesResponse.Device")
	proto.RegisterType((*RegisterDeviceRequest)(nil), "networkserver.RegisterDeviceRequest")
	proto.RegisterType((*StatusRequest)(nil), "networkserver.StatusRequest")
	proto.RegisterType((*Status)(nil), "networkserver.Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for NetworkServer service

type NetworkServerClient interface {
	// Broker requests devices with DevAddr for MIC check
	GetDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error)
	// Broker requests device activation "template" from Network Server
	PrepareActivation(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*broker.DeduplicatedDeviceActivationRequest, error)
	// Broker confirms device activation
	Activate(ctx context.Context, in *handler.DeviceActivationResponse, opts ...grpc.CallOption) (*handler.DeviceActivationResponse, error)
	// Broker informs Network Server about Uplink
	Uplink(ctx context.Context, in *broker.DeduplicatedUplinkMessage, opts ...grpc.CallOption) (*broker.DeduplicatedUplinkMessage, error)
	// Broker informs Network Server about Downlink, NetworkServer should sign, add MIC, ...
	Downlink(ctx context.Context, in *broker.DownlinkMessage, opts ...grpc.CallOption) (*broker.DownlinkMessage, error)
}

type networkServerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerClient(cc *grpc.ClientConn) NetworkServerClient {
	return &networkServerClient{cc}
}

func (c *networkServerClient) GetDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error) {
	out := new(DevicesResponse)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServer/GetDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) PrepareActivation(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*broker.DeduplicatedDeviceActivationRequest, error) {
	out := new(broker.DeduplicatedDeviceActivationRequest)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServer/PrepareActivation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) Activate(ctx context.Context, in *handler.DeviceActivationResponse, opts ...grpc.CallOption) (*handler.DeviceActivationResponse, error) {
	out := new(handler.DeviceActivationResponse)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServer/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) Uplink(ctx context.Context, in *broker.DeduplicatedUplinkMessage, opts ...grpc.CallOption) (*broker.DeduplicatedUplinkMessage, error) {
	out := new(broker.DeduplicatedUplinkMessage)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServer/Uplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) Downlink(ctx context.Context, in *broker.DownlinkMessage, opts ...grpc.CallOption) (*broker.DownlinkMessage, error) {
	out := new(broker.DownlinkMessage)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServer/Downlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServer service

type NetworkServerServer interface {
	// Broker requests devices with DevAddr for MIC check
	GetDevices(context.Context, *DevicesRequest) (*DevicesResponse, error)
	// Broker requests device activation "template" from Network Server
	PrepareActivation(context.Context, *broker.DeduplicatedDeviceActivationRequest) (*broker.DeduplicatedDeviceActivationRequest, error)
	// Broker confirms device activation
	Activate(context.Context, *handler.DeviceActivationResponse) (*handler.DeviceActivationResponse, error)
	// Broker informs Network Server about Uplink
	Uplink(context.Context, *broker.DeduplicatedUplinkMessage) (*broker.DeduplicatedUplinkMessage, error)
	// Broker informs Network Server about Downlink, NetworkServer should sign, add MIC, ...
	Downlink(context.Context, *broker.DownlinkMessage) (*broker.DownlinkMessage, error)
}

func RegisterNetworkServerServer(s *grpc.Server, srv NetworkServerServer) {
	s.RegisterService(&_NetworkServer_serviceDesc, srv)
}

func _NetworkServer_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetDevices(ctx, req.(*DevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_PrepareActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DeduplicatedDeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).PrepareActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/PrepareActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).PrepareActivation(ctx, req.(*broker.DeduplicatedDeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(handler.DeviceActivationResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).Activate(ctx, req.(*handler.DeviceActivationResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_Uplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DeduplicatedUplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).Uplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/Uplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).Uplink(ctx, req.(*broker.DeduplicatedUplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_Downlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DownlinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).Downlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/Downlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).Downlink(ctx, req.(*broker.DownlinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkserver.NetworkServer",
	HandlerType: (*NetworkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _NetworkServer_GetDevices_Handler,
		},
		{
			MethodName: "PrepareActivation",
			Handler:    _NetworkServer_PrepareActivation_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _NetworkServer_Activate_Handler,
		},
		{
			MethodName: "Uplink",
			Handler:    _NetworkServer_Uplink_Handler,
		},
		{
			MethodName: "Downlink",
			Handler:    _NetworkServer_Downlink_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for NetworkServerManager service

type NetworkServerManagerClient interface {
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*api.Ack, error)
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error)
}

type networkServerManagerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerManagerClient(cc *grpc.ClientConn) NetworkServerManagerClient {
	return &networkServerManagerClient{cc}
}

func (c *networkServerManagerClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*api.Ack, error) {
	out := new(api.Ack)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServerManager/RegisterDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerManagerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServerManager/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServerManager service

type NetworkServerManagerServer interface {
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*api.Ack, error)
	GetStatus(context.Context, *StatusRequest) (*Status, error)
}

func RegisterNetworkServerManagerServer(s *grpc.Server, srv NetworkServerManagerServer) {
	s.RegisterService(&_NetworkServerManager_serviceDesc, srv)
}

func _NetworkServerManager_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerManagerServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServerManager/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerManagerServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServerManager/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerManagerServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkserver.NetworkServerManager",
	HandlerType: (*NetworkServerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _NetworkServerManager_RegisterDevice_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _NetworkServerManager_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *DevicesRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DevicesRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DevAddr != nil {
		data[i] = 0xa
		i++
		i = encodeVarintNetworkserver(data, i, uint64(m.DevAddr.Size()))
		n1, err := m.DevAddr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FCnt != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintNetworkserver(data, i, uint64(m.FCnt))
	}
	return i, nil
}

func (m *DevicesResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DevicesResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			data[i] = 0xa
			i++
			i = encodeVarintNetworkserver(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DevicesResponse_Device) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DevicesResponse_Device) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppEui != nil {
		data[i] = 0xa
		i++
		i = encodeVarintNetworkserver(data, i, uint64(m.AppEui.Size()))
		n2, err := m.AppEui.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DevEui != nil {
		data[i] = 0x12
		i++
		i = encodeVarintNetworkserver(data, i, uint64(m.DevEui.Size()))
		n3, err := m.DevEui.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.NwkSKey != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintNetworkserver(data, i, uint64(m.NwkSKey.Size()))
		n4, err := m.NwkSKey.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.FCnt != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintNetworkserver(data, i, uint64(m.FCnt))
	}
	if m.DisableFCntCheck {
		data[i] = 0x58
		i++
		if m.DisableFCntCheck {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Uses32BitFCnt {
		data[i] = 0x60
		i++
		if m.Uses32BitFCnt {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RegisterDeviceRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RegisterDeviceRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatusRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Status) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Status) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DevicesPerAddress != nil {
		data[i] = 0xa
		i++
		i = encodeVarintNetworkserver(data, i, uint64(m.DevicesPerAddress.Size()))
		n5, err := m.DevicesPerAddress.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeFixed64Networkserver(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Networkserver(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNetworkserver(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *DevicesRequest) Size() (n int) {
	var l int
	_ = l
	if m.DevAddr != nil {
		l = m.DevAddr.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovNetworkserver(uint64(m.FCnt))
	}
	return n
}

func (m *DevicesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovNetworkserver(uint64(l))
		}
	}
	return n
}

func (m *DevicesResponse_Device) Size() (n int) {
	var l int
	_ = l
	if m.AppEui != nil {
		l = m.AppEui.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	if m.DevEui != nil {
		l = m.DevEui.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	if m.NwkSKey != nil {
		l = m.NwkSKey.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovNetworkserver(uint64(m.FCnt))
	}
	if m.DisableFCntCheck {
		n += 2
	}
	if m.Uses32BitFCnt {
		n += 2
	}
	return n
}

func (m *RegisterDeviceRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.DevicesPerAddress != nil {
		l = m.DevicesPerAddress.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	return n
}

func sovNetworkserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetworkserver(x uint64) (n int) {
	return sovNetworkserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DevicesRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevAddr
			m.DevAddr = &v
			if err := m.DevAddr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevicesResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &DevicesResponse_Device{})
			if err := m.Results[len(m.Results)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevicesResponse_Device) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.AppEUI
			m.AppEui = &v
			if err := m.AppEui.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevEUI
			m.DevEui = &v
			if err := m.DevEui.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.NwkSKey
			m.NwkSKey = &v
			if err := m.NwkSKey.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableFCntCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableFCntCheck = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uses32BitFCnt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uses32BitFCnt = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterDeviceRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicesPerAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DevicesPerAddress == nil {
				m.DevicesPerAddress = &api.Percentiles{}
			}
			if err := m.DevicesPerAddress.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkserver(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetworkserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetworkserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetworkserver(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetworkserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkserver   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorNetworkserver = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0xb6, 0x14, 0xdb, 0x32, 0x50, 0x28, 0x83, 0x84, 0xa6, 0x51, 0xd4, 0x46, 0x23, 0x89, 0xa1,
	0x8d, 0x25, 0x6a, 0x4c, 0x4c, 0xa4, 0xfc, 0x68, 0x94, 0x40, 0x70, 0x81, 0xeb, 0xcd, 0x76, 0xf7,
	0xd0, 0x4e, 0x5a, 0x66, 0xd7, 0x99, 0xd9, 0x56, 0xde, 0xc4, 0xf8, 0x0a, 0xbe, 0x83, 0xd7, 0x5e,
	0x7a, 0xed, 0x85, 0x31, 0x7a, 0xe5, 0x5b, 0x78, 0x76, 0x66, 0x0a, 0x2e, 0x82, 0xfc, 0x5c, 0x4c,
	0x76, 0xe6, 0xcc, 0xf7, 0x7d, 0x73, 0xe6, 0x9c, 0x6f, 0x96, 0xac, 0xb7, 0x99, 0xea, 0xc4, 0xad,
	0x9a, 0x1f, 0x1e, 0xd4, 0x77, 0x3b, 0xb0, 0xdb, 0x61, 0xbc, 0x2d, 0xb7, 0x40, 0x0d, 0x42, 0xd1,
	0xad, 0x2b, 0xc5, 0xeb, 0x5e, 0xc4, 0xea, 0xdc, 0xac, 0x25, 0x88, 0x3e, 0x88, 0xf4, 0xaa, 0x16,
	0x89, 0x50, 0x85, 0xb4, 0x98, 0x0a, 0x56, 0x16, 0xff, 0x52, 0x6d, 0x87, 0xed, 0xb0, 0xae, 0x51,
	0xad, 0x78, 0x5f, 0xaf, 0xf4, 0x42, 0xcf, 0x0c, 0x3b, 0x05, 0x3f, 0x33, 0x09, 0x1c, 0x16, 0xfe,
	0xf4, 0x22, 0xf0, 0x96, 0x08, 0xbb, 0x98, 0xac, 0xf9, 0x58, 0xe2, 0xb3, 0x8b, 0x10, 0x3b, 0x1e,
	0x0f, 0x7a, 0xc8, 0xb4, 0x5f, 0x43, 0xad, 0xbe, 0x27, 0x93, 0x6b, 0xd0, 0x67, 0x3e, 0x48, 0x07,
	0xde, 0xc5, 0x20, 0x15, 0x7d, 0x4b, 0x0a, 0x01, 0xf4, 0x5d, 0x2f, 0x08, 0x44, 0x39, 0x73, 0x27,
	0xb3, 0x30, 0xb1, 0xf2, 0xe4, 0xdb, 0xf7, 0xdb, 0x8d, 0xf3, 0x8e, 0xf0, 0x43, 0x01, 0x75, 0x75,
	0x18, 0x81, 0xac, 0xa1, 0x60, 0x13, 0xd9, 0x4e, 0x3e, 0x30, 0x13, 0x3a, 0x43, 0xae, 0xef, 0xbb,
	0x3e, 0x57, 0xe5, 0x11, 0xd4, 0x2b, 0x3a, 0xa3, 0xfb, 0xab, 0x5c, 0x55, 0x3f, 0x67, 0xc9, 0xd4,
	0xd1, 0xd1, 0x32, 0x0a, 0xb9, 0x04, 0xfa, 0x82, 0xe4, 0x05, 0xc8, 0xb8, 0xa7, 0x24, 0x1e, 0x9d,
	0x5d, 0x18, 0x6f, 0xdc, 0xaf, 0xa5, 0xbb, 0x72, 0x82, 0x60, 0xd7, 0xce, 0x90, 0x55, 0xf9, 0x3d,
	0x42, 0x72, 0x26, 0x46, 0xb7, 0x48, 0xde, 0x8b, 0x22, 0x17, 0x62, 0x66, 0xaf, 0xf1, 0x18, 0xaf,
	0xf1, 0xe8, 0x12, 0xd7, 0x68, 0x46, 0xd1, 0xfa, 0xde, 0x6b, 0x27, 0x87, 0x2a, 0xeb, 0x31, 0x4b,
	0xf4, 0x92, 0xba, 0x24, 0x7a, 0x23, 0x57, 0xd2, 0xc3, 0xbc, 0xb4, 0x1e, 0xaa, 0x24, 0x7a, 0x0e,
	0x19, 0xe3, 0x83, 0xae, 0x2b, 0xdd, 0x2e, 0x1c, 0x96, 0xb3, 0x57, 0x2a, 0xf4, 0xd6, 0xa0, 0xbb,
	0xb3, 0x01, 0x87, 0x4e, 0x9e, 0x9b, 0xc9, 0x71, 0xa1, 0x47, 0x8f, 0x0b, 0x4d, 0x17, 0xc9, 0x4c,
	0xc0, 0xa4, 0xd7, 0xea, 0x81, 0xab, 0x37, 0x5d, 0xbf, 0x03, 0x7e, 0xb7, 0x3c, 0x8e, 0x90, 0x82,
	0x53, 0xb2, 0x5b, 0x2f, 0x11, 0xb9, 0x9a, 0xc4, 0xe9, 0x03, 0x52, 0x8a, 0x25, 0xc8, 0xa5, 0x86,
	0xdb, 0x62, 0xca, 0x30, 0xca, 0x13, 0x1a, 0x5b, 0x34, 0xf1, 0x15, 0xa6, 0x12, 0x74, 0x75, 0x8e,
	0xcc, 0x3a, 0xd0, 0x66, 0x52, 0x81, 0xb0, 0x6d, 0x30, 0x0e, 0xaa, 0x4e, 0x91, 0xe2, 0x8e, 0xf2,
	0x54, 0x3c, 0xb4, 0x54, 0xf5, 0x0d, 0xc9, 0x99, 0x00, 0x5d, 0xc6, 0x5c, 0x4c, 0x0b, 0xdd, 0x08,
	0x84, 0x36, 0x19, 0x48, 0xa9, 0x1b, 0x34, 0xde, 0x28, 0xd5, 0x92, 0xb7, 0xb0, 0x0d, 0xc2, 0x07,
	0xae, 0x58, 0x0f, 0xdb, 0x3c, 0x6d, 0xc1, 0x18, 0x6b, 0x1a, 0x68, 0xe3, 0x53, 0x96, 0x14, 0x6d,
	0x39, 0x76, 0xb4, 0x27, 0xe8, 0x06, 0x21, 0xaf, 0x40, 0x59, 0x67, 0xd0, 0x5b, 0x67, 0x39, 0x46,
	0xa7, 0x52, 0x99, 0xff, 0xbf, 0xa1, 0xe8, 0x01, 0x99, 0xde, 0x16, 0x10, 0x79, 0x02, 0x9a, 0xbe,
	0x62, 0x7d, 0x4f, 0xb1, 0x90, 0xd3, 0x87, 0x35, 0xfb, 0xdc, 0xd6, 0x20, 0x88, 0xa3, 0x1e, 0xf3,
	0x3d, 0x05, 0x81, 0x61, 0x1e, 0xa3, 0x86, 0x27, 0x5c, 0x06, 0x4c, 0xb7, 0x49, 0xc1, 0x06, 0x81,
	0xde, 0xad, 0x0d, 0x9f, 0xe6, 0xbf, 0x68, 0x93, 0x5d, 0xe5, 0x7c, 0x08, 0xda, 0x34, 0xb7, 0x87,
	0xa7, 0xf2, 0x2e, 0xea, 0x9d, 0x92, 0x88, 0xd9, 0xdb, 0xc4, 0x4a, 0x7a, 0xed, 0x44, 0xef, 0x3c,
	0x08, 0x7d, 0x4e, 0x0a, 0x6b, 0xe1, 0x80, 0x6b, 0xc5, 0xb9, 0x23, 0xb8, 0x8d, 0x0c, 0x75, 0xce,
	0xda, 0x68, 0x7c, 0xcc, 0x90, 0x1b, 0xa9, 0x6e, 0x6d, 0x7a, 0x1c, 0xe3, 0x02, 0x8d, 0x30, 0x99,
	0x36, 0x0f, 0xbd, 0x77, 0xa2, 0x33, 0xa7, 0x7a, 0xab, 0x52, 0xd0, 0x1e, 0x69, 0xa2, 0x4f, 0x97,
	0xc9, 0x18, 0xb6, 0xdd, 0xfa, 0xea, 0xe6, 0x09, 0x72, 0xca, 0x7f, 0x95, 0xd9, 0x53, 0x77, 0x57,
	0x4a, 0x5f, 0x7e, 0xce, 0x67, 0xbe, 0xe2, 0xf8, 0x81, 0xe3, 0xc3, 0xaf, 0xf9, 0x6b, 0xad, 0x9c,
	0xfe, 0x29, 0x2e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xef, 0xf8, 0xb4, 0x3e, 0x06, 0x00,
	0x00,
}
