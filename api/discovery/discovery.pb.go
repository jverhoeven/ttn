// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/discovery/discovery.proto
// DO NOT EDIT!

/*
	Package discovery is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/ttn/api/discovery/discovery.proto

	It has these top-level messages:
		Announcement
		DiscoverRequest
		DiscoverResponse
*/
package discovery

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/TheThingsNetwork/ttn/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Announcement struct {
	ServiceName    string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceVersion string `protobuf:"bytes,2,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	NetAddress     string `protobuf:"bytes,3,opt,name=net_address,json=netAddress,proto3" json:"net_address,omitempty"`
	Description    string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Fingerprint    string `protobuf:"bytes,12,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (m *Announcement) Reset()                    { *m = Announcement{} }
func (m *Announcement) String() string            { return proto.CompactTextString(m) }
func (*Announcement) ProtoMessage()               {}
func (*Announcement) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{0} }

type DiscoverRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (m *DiscoverRequest) Reset()                    { *m = DiscoverRequest{} }
func (m *DiscoverRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverRequest) ProtoMessage()               {}
func (*DiscoverRequest) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{1} }

type DiscoverResponse struct {
	Services []*Announcement `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *DiscoverResponse) Reset()                    { *m = DiscoverResponse{} }
func (m *DiscoverResponse) String() string            { return proto.CompactTextString(m) }
func (*DiscoverResponse) ProtoMessage()               {}
func (*DiscoverResponse) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{2} }

func (m *DiscoverResponse) GetServices() []*Announcement {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*Announcement)(nil), "discovery.Announcement")
	proto.RegisterType((*DiscoverRequest)(nil), "discovery.DiscoverRequest")
	proto.RegisterType((*DiscoverResponse)(nil), "discovery.DiscoverResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Discovery service

type DiscoveryClient interface {
	Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*api.Ack, error)
	Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
}

type discoveryClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryClient(cc *grpc.ClientConn) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*api.Ack, error) {
	out := new(api.Ack)
	err := grpc.Invoke(ctx, "/discovery.Discovery/Announce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := grpc.Invoke(ctx, "/discovery.Discovery/Discover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Discovery service

type DiscoveryServer interface {
	Announce(context.Context, *Announcement) (*api.Ack, error)
	Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error)
}

func RegisterDiscoveryServer(s *grpc.Server, srv DiscoveryServer) {
	s.RegisterService(&_Discovery_serviceDesc, srv)
}

func _Discovery_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Announcement)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DiscoveryServer).Announce(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Discovery_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DiscoveryServer).Discover(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Discovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Announce",
			Handler:    _Discovery_Announce_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _Discovery_Discover_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for DiscoveryManager service

type DiscoveryManagerClient interface {
}

type discoveryManagerClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryManagerClient(cc *grpc.ClientConn) DiscoveryManagerClient {
	return &discoveryManagerClient{cc}
}

// Server API for DiscoveryManager service

type DiscoveryManagerServer interface {
}

func RegisterDiscoveryManagerServer(s *grpc.Server, srv DiscoveryManagerServer) {
	s.RegisterService(&_DiscoveryManager_serviceDesc, srv)
}

var _DiscoveryManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.DiscoveryManager",
	HandlerType: (*DiscoveryManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
}

func (m *Announcement) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Announcement) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDiscovery(data, i, uint64(len(m.ServiceName)))
		i += copy(data[i:], m.ServiceName)
	}
	if len(m.ServiceVersion) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDiscovery(data, i, uint64(len(m.ServiceVersion)))
		i += copy(data[i:], m.ServiceVersion)
	}
	if len(m.NetAddress) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintDiscovery(data, i, uint64(len(m.NetAddress)))
		i += copy(data[i:], m.NetAddress)
	}
	if len(m.Description) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintDiscovery(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	if len(m.Fingerprint) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintDiscovery(data, i, uint64(len(m.Fingerprint)))
		i += copy(data[i:], m.Fingerprint)
	}
	return i, nil
}

func (m *DiscoverRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DiscoverRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDiscovery(data, i, uint64(len(m.ServiceName)))
		i += copy(data[i:], m.ServiceName)
	}
	return i, nil
}

func (m *DiscoverResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DiscoverResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, msg := range m.Services {
			data[i] = 0xa
			i++
			i = encodeVarintDiscovery(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Discovery(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Discovery(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDiscovery(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Announcement) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ServiceVersion)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.NetAddress)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	return n
}

func (m *DiscoverRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	return n
}

func (m *DiscoverResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	return n
}

func sovDiscovery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDiscovery(x uint64) (n int) {
	return sovDiscovery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Announcement) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Announcement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Announcement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &Announcement{})
			if err := m.Services[len(m.Services)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiscovery(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDiscovery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDiscovery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDiscovery(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDiscovery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiscovery   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorDiscovery = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4e, 0xc2, 0x40,
	0x18, 0xc7, 0xad, 0x24, 0xa6, 0x7c, 0x25, 0x42, 0x6e, 0xb1, 0xa9, 0x09, 0x22, 0x8b, 0x2c, 0xb4,
	0x09, 0xb8, 0x3a, 0xa0, 0x26, 0x4e, 0x32, 0x10, 0xe2, 0x4a, 0x4a, 0xfb, 0x09, 0x17, 0xc2, 0x5d,
	0xbd, 0x3b, 0x30, 0x4c, 0xbe, 0x86, 0x6f, 0xe3, 0xea, 0xe8, 0x23, 0x18, 0x7d, 0x11, 0x8f, 0x5e,
	0x4b, 0x1b, 0xa3, 0x09, 0xc3, 0x25, 0xcd, 0xaf, 0xbf, 0xff, 0x77, 0xfd, 0x7f, 0x85, 0xab, 0x19,
	0x55, 0xf3, 0xd5, 0xd4, 0x8f, 0xf8, 0x32, 0x18, 0xcf, 0x71, 0x3c, 0xa7, 0x6c, 0x26, 0x87, 0xa8,
	0x9e, 0xb9, 0x58, 0x04, 0x4a, 0xb1, 0x20, 0x4c, 0x68, 0x10, 0x53, 0x19, 0xf1, 0x35, 0x8a, 0x4d,
	0xf1, 0xe4, 0x27, 0x82, 0x2b, 0x4e, 0xaa, 0x3b, 0xe0, 0x75, 0xf7, 0x99, 0xa4, 0x8f, 0x49, 0xb6,
	0xdf, 0x2c, 0xa8, 0x0d, 0x18, 0xe3, 0x2b, 0x16, 0xe1, 0x12, 0x99, 0x22, 0xe7, 0x50, 0x93, 0x28,
	0xd6, 0x34, 0xc2, 0x09, 0x0b, 0x97, 0xe8, 0x5a, 0x2d, 0xab, 0x53, 0x1d, 0x39, 0x19, 0x1b, 0x6a,
	0x44, 0x2e, 0xa0, 0x9e, 0x2b, 0xfa, 0x4a, 0x49, 0x39, 0x73, 0x0f, 0x53, 0xeb, 0x38, 0xc3, 0x0f,
	0x86, 0x92, 0x33, 0x70, 0x18, 0xaa, 0x49, 0x18, 0xc7, 0x02, 0xa5, 0x74, 0x2b, 0xa9, 0x04, 0x1a,
	0x0d, 0x0c, 0x21, 0x2d, 0x70, 0x62, 0x94, 0x91, 0xa0, 0x89, 0xda, 0x4e, 0x71, 0xcc, 0x5d, 0x25,
	0xb4, 0x35, 0x1e, 0x75, 0x03, 0x14, 0x89, 0xa0, 0x4c, 0xb9, 0x35, 0x63, 0x94, 0x50, 0xfb, 0x12,
	0xea, 0xb7, 0x59, 0xfb, 0x11, 0x3e, 0xad, 0x50, 0xee, 0xd3, 0xa1, 0x7d, 0x07, 0x8d, 0x22, 0x25,
	0x13, 0xce, 0x24, 0x92, 0x3e, 0xd8, 0x99, 0x22, 0x75, 0xa4, 0xd2, 0x71, 0x7a, 0x27, 0x7e, 0xb1,
	0xe9, 0xf2, 0x96, 0x46, 0x3b, 0xb1, 0xf7, 0x02, 0xd5, 0x7c, 0xd0, 0x86, 0x74, 0xc1, 0xce, 0x35,
	0xf2, 0x5f, 0xd6, 0xb3, 0xfd, 0xed, 0xfa, 0x07, 0xd1, 0x82, 0xdc, 0x80, 0x9d, 0x67, 0x89, 0x57,
	0xd2, 0x7f, 0xf5, 0xf1, 0x4e, 0xff, 0x7c, 0x67, 0xbe, 0xba, 0x47, 0x8a, 0x26, 0x9b, 0xfb, 0x90,
	0x85, 0x7a, 0x31, 0xd7, 0x8d, 0xf7, 0xaf, 0xa6, 0xf5, 0xa1, 0xcf, 0xa7, 0x3e, 0xaf, 0xdf, 0xcd,
	0x83, 0xe9, 0x51, 0xfa, 0xbb, 0xfb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x46, 0xee, 0xf4, 0xf2,
	0x69, 0x02, 0x00, 0x00,
}
