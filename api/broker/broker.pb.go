// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/broker/broker.proto
// DO NOT EDIT!

/*
	Package broker is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/ttn/api/broker/broker.proto

	It has these top-level messages:
		DownlinkOption
		UplinkMessage
		DownlinkMessage
		DeviceActivationResponse
		DeduplicatedUplinkMessage
		DeviceActivationRequest
		DeduplicatedDeviceActivationRequest
		SubscribeRequest
		ApplicationsRequest
		ApplicationsResponse
		RegisterApplicationRequest
		UnregisterApplicationRequest
		StatusRequest
		StatusResponse
*/
package broker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/TheThingsNetwork/ttn/api"
import protocol "github.com/TheThingsNetwork/ttn/api/protocol"
import gateway "github.com/TheThingsNetwork/ttn/api/gateway"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type DownlinkOption struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Score      uint32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Deadline   int64  `protobuf:"varint,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (m *DownlinkOption) Reset()                    { *m = DownlinkOption{} }
func (m *DownlinkOption) String() string            { return proto.CompactTextString(m) }
func (*DownlinkOption) ProtoMessage()               {}
func (*DownlinkOption) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{0} }

// received from the Router
type UplinkMessage struct {
	Payload          []byte               `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	ProtocolMetadata *protocol.RxMetadata `protobuf:"bytes,11,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata,omitempty"`
	GatewayMetadata  *gateway.RxMetadata  `protobuf:"bytes,12,opt,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata,omitempty"`
	DownlinkOptions  []*DownlinkOption    `protobuf:"bytes,21,rep,name=downlink_options,json=downlinkOptions" json:"downlink_options,omitempty"`
}

func (m *UplinkMessage) Reset()                    { *m = UplinkMessage{} }
func (m *UplinkMessage) String() string            { return proto.CompactTextString(m) }
func (*UplinkMessage) ProtoMessage()               {}
func (*UplinkMessage) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{1} }

func (m *UplinkMessage) GetProtocolMetadata() *protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return nil
}

func (m *UplinkMessage) GetGatewayMetadata() *gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return nil
}

func (m *UplinkMessage) GetDownlinkOptions() []*DownlinkOption {
	if m != nil {
		return m.DownlinkOptions
	}
	return nil
}

// received from the Handler, sent to the Router, used as Template
type DownlinkMessage struct {
	Payload        []byte          `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	DownlinkOption *DownlinkOption `protobuf:"bytes,11,opt,name=downlink_option,json=downlinkOption" json:"downlink_option,omitempty"`
}

func (m *DownlinkMessage) Reset()                    { *m = DownlinkMessage{} }
func (m *DownlinkMessage) String() string            { return proto.CompactTextString(m) }
func (*DownlinkMessage) ProtoMessage()               {}
func (*DownlinkMessage) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{2} }

func (m *DownlinkMessage) GetDownlinkOption() *DownlinkOption {
	if m != nil {
		return m.DownlinkOption
	}
	return nil
}

// sent to the Router, used as Template
type DeviceActivationResponse struct {
	Payload        []byte          `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	DownlinkOption *DownlinkOption `protobuf:"bytes,11,opt,name=downlink_option,json=downlinkOption" json:"downlink_option,omitempty"`
}

func (m *DeviceActivationResponse) Reset()                    { *m = DeviceActivationResponse{} }
func (m *DeviceActivationResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceActivationResponse) ProtoMessage()               {}
func (*DeviceActivationResponse) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{3} }

func (m *DeviceActivationResponse) GetDownlinkOption() *DownlinkOption {
	if m != nil {
		return m.DownlinkOption
	}
	return nil
}

// sent to the Handler
type DeduplicatedUplinkMessage struct {
	Payload          []byte                                             `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	DevEui           *github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui,omitempty"`
	AppEui           *github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui,omitempty"`
	ProtocolMetadata *protocol.RxMetadata                               `protobuf:"bytes,21,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata,omitempty"`
	GatewayMetadata  []*gateway.RxMetadata                              `protobuf:"bytes,22,rep,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata,omitempty"`
	ResponseTemplate *DownlinkMessage                                   `protobuf:"bytes,31,opt,name=response_template,json=responseTemplate" json:"response_template,omitempty"`
	NeedDownlink     bool                                               `protobuf:"varint,32,opt,name=need_downlink,json=needDownlink,proto3" json:"need_downlink,omitempty"`
}

func (m *DeduplicatedUplinkMessage) Reset()                    { *m = DeduplicatedUplinkMessage{} }
func (m *DeduplicatedUplinkMessage) String() string            { return proto.CompactTextString(m) }
func (*DeduplicatedUplinkMessage) ProtoMessage()               {}
func (*DeduplicatedUplinkMessage) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{4} }

func (m *DeduplicatedUplinkMessage) GetProtocolMetadata() *protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return nil
}

func (m *DeduplicatedUplinkMessage) GetGatewayMetadata() []*gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return nil
}

func (m *DeduplicatedUplinkMessage) GetResponseTemplate() *DownlinkMessage {
	if m != nil {
		return m.ResponseTemplate
	}
	return nil
}

// received from the Router
type DeviceActivationRequest struct {
	Payload            []byte                                             `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	DevEui             *github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui,omitempty"`
	AppEui             *github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui,omitempty"`
	ProtocolMetadata   *protocol.RxMetadata                               `protobuf:"bytes,21,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata,omitempty"`
	GatewayMetadata    *gateway.RxMetadata                                `protobuf:"bytes,22,opt,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata,omitempty"`
	ActivationMetadata *protocol.ActivationMetadata                       `protobuf:"bytes,23,opt,name=activation_metadata,json=activationMetadata" json:"activation_metadata,omitempty"`
	DownlinkOptions    []*DownlinkOption                                  `protobuf:"bytes,31,rep,name=downlink_options,json=downlinkOptions" json:"downlink_options,omitempty"`
}

func (m *DeviceActivationRequest) Reset()                    { *m = DeviceActivationRequest{} }
func (m *DeviceActivationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeviceActivationRequest) ProtoMessage()               {}
func (*DeviceActivationRequest) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{5} }

func (m *DeviceActivationRequest) GetProtocolMetadata() *protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return nil
}

func (m *DeviceActivationRequest) GetGatewayMetadata() *gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return nil
}

func (m *DeviceActivationRequest) GetActivationMetadata() *protocol.ActivationMetadata {
	if m != nil {
		return m.ActivationMetadata
	}
	return nil
}

func (m *DeviceActivationRequest) GetDownlinkOptions() []*DownlinkOption {
	if m != nil {
		return m.DownlinkOptions
	}
	return nil
}

// sent to the Handler
type DeduplicatedDeviceActivationRequest struct {
	Payload            []byte                                             `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	DevEui             *github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui,omitempty"`
	AppEui             *github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui,omitempty"`
	ProtocolMetadata   *protocol.RxMetadata                               `protobuf:"bytes,21,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata,omitempty"`
	GatewayMetadata    *gateway.RxMetadata                                `protobuf:"bytes,22,opt,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata,omitempty"`
	ActivationMetadata *protocol.ActivationMetadata                       `protobuf:"bytes,23,opt,name=activation_metadata,json=activationMetadata" json:"activation_metadata,omitempty"`
	ResponseTemplate   *DeviceActivationResponse                          `protobuf:"bytes,31,opt,name=response_template,json=responseTemplate" json:"response_template,omitempty"`
}

func (m *DeduplicatedDeviceActivationRequest) Reset()         { *m = DeduplicatedDeviceActivationRequest{} }
func (m *DeduplicatedDeviceActivationRequest) String() string { return proto.CompactTextString(m) }
func (*DeduplicatedDeviceActivationRequest) ProtoMessage()    {}
func (*DeduplicatedDeviceActivationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBroker, []int{6}
}

func (m *DeduplicatedDeviceActivationRequest) GetProtocolMetadata() *protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return nil
}

func (m *DeduplicatedDeviceActivationRequest) GetGatewayMetadata() *gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return nil
}

func (m *DeduplicatedDeviceActivationRequest) GetActivationMetadata() *protocol.ActivationMetadata {
	if m != nil {
		return m.ActivationMetadata
	}
	return nil
}

func (m *DeduplicatedDeviceActivationRequest) GetResponseTemplate() *DeviceActivationResponse {
	if m != nil {
		return m.ResponseTemplate
	}
	return nil
}

// message SubscribeRequest is used by a Handler to subscribe to uplink messages
// for a certain application.
type SubscribeRequest struct {
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{7} }

type ApplicationsRequest struct {
}

func (m *ApplicationsRequest) Reset()                    { *m = ApplicationsRequest{} }
func (m *ApplicationsRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplicationsRequest) ProtoMessage()               {}
func (*ApplicationsRequest) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{8} }

type ApplicationsResponse struct {
	AppEuis []string `protobuf:"bytes,1,rep,name=app_euis,json=appEuis" json:"app_euis,omitempty"`
}

func (m *ApplicationsResponse) Reset()                    { *m = ApplicationsResponse{} }
func (m *ApplicationsResponse) String() string            { return proto.CompactTextString(m) }
func (*ApplicationsResponse) ProtoMessage()               {}
func (*ApplicationsResponse) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{9} }

// message RegisterApplicationRequest is used to register an application at this
// Broker
type RegisterApplicationRequest struct {
	AppEui string `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3" json:"app_eui,omitempty"`
}

func (m *RegisterApplicationRequest) Reset()         { *m = RegisterApplicationRequest{} }
func (m *RegisterApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterApplicationRequest) ProtoMessage()    {}
func (*RegisterApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBroker, []int{10}
}

// message UnregisterApplicationRequest is used to unregister an application at
// this Broker
type UnregisterApplicationRequest struct {
	AppEui string `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3" json:"app_eui,omitempty"`
}

func (m *UnregisterApplicationRequest) Reset()         { *m = UnregisterApplicationRequest{} }
func (m *UnregisterApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*UnregisterApplicationRequest) ProtoMessage()    {}
func (*UnregisterApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBroker, []int{11}
}

// message StatusRequest is used to request the status of this Broker
type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{12} }

// message StatusResponse is the response to the StatusRequest
type StatusResponse struct {
	// Uplink
	Uplink       *api.Rates `protobuf:"bytes,1,opt,name=uplink" json:"uplink,omitempty"`
	UplinkUnique *api.Rates `protobuf:"bytes,2,opt,name=uplink_unique,json=uplinkUnique" json:"uplink_unique,omitempty"`
	// Downlink
	Downlink *api.Rates `protobuf:"bytes,11,opt,name=downlink" json:"downlink,omitempty"`
	// Activations
	Activations         *api.Rates `protobuf:"bytes,21,opt,name=activations" json:"activations,omitempty"`
	ActivationsUnique   *api.Rates `protobuf:"bytes,22,opt,name=activations_unique,json=activationsUnique" json:"activations_unique,omitempty"`
	ActivationsAccepted *api.Rates `protobuf:"bytes,23,opt,name=activations_accepted,json=activationsAccepted" json:"activations_accepted,omitempty"`
	// Deduplication histogram percentiles
	Deduplication *api.Percentiles `protobuf:"bytes,31,opt,name=deduplication" json:"deduplication,omitempty"`
	// Connections
	ConnectedRouters  uint32 `protobuf:"varint,41,opt,name=connected_routers,json=connectedRouters,proto3" json:"connected_routers,omitempty"`
	ConnectedHandlers uint32 `protobuf:"varint,42,opt,name=connected_handlers,json=connectedHandlers,proto3" json:"connected_handlers,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorBroker, []int{13} }

func (m *StatusResponse) GetUplink() *api.Rates {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *StatusResponse) GetUplinkUnique() *api.Rates {
	if m != nil {
		return m.UplinkUnique
	}
	return nil
}

func (m *StatusResponse) GetDownlink() *api.Rates {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func (m *StatusResponse) GetActivations() *api.Rates {
	if m != nil {
		return m.Activations
	}
	return nil
}

func (m *StatusResponse) GetActivationsUnique() *api.Rates {
	if m != nil {
		return m.ActivationsUnique
	}
	return nil
}

func (m *StatusResponse) GetActivationsAccepted() *api.Rates {
	if m != nil {
		return m.ActivationsAccepted
	}
	return nil
}

func (m *StatusResponse) GetDeduplication() *api.Percentiles {
	if m != nil {
		return m.Deduplication
	}
	return nil
}

func init() {
	proto.RegisterType((*DownlinkOption)(nil), "broker.DownlinkOption")
	proto.RegisterType((*UplinkMessage)(nil), "broker.UplinkMessage")
	proto.RegisterType((*DownlinkMessage)(nil), "broker.DownlinkMessage")
	proto.RegisterType((*DeviceActivationResponse)(nil), "broker.DeviceActivationResponse")
	proto.RegisterType((*DeduplicatedUplinkMessage)(nil), "broker.DeduplicatedUplinkMessage")
	proto.RegisterType((*DeviceActivationRequest)(nil), "broker.DeviceActivationRequest")
	proto.RegisterType((*DeduplicatedDeviceActivationRequest)(nil), "broker.DeduplicatedDeviceActivationRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "broker.SubscribeRequest")
	proto.RegisterType((*ApplicationsRequest)(nil), "broker.ApplicationsRequest")
	proto.RegisterType((*ApplicationsResponse)(nil), "broker.ApplicationsResponse")
	proto.RegisterType((*RegisterApplicationRequest)(nil), "broker.RegisterApplicationRequest")
	proto.RegisterType((*UnregisterApplicationRequest)(nil), "broker.UnregisterApplicationRequest")
	proto.RegisterType((*StatusRequest)(nil), "broker.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "broker.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Broker service

type BrokerClient interface {
	// Router initiates an Association with the Broker.
	Associate(ctx context.Context, opts ...grpc.CallOption) (Broker_AssociateClient, error)
	// Handler subscribes to uplink stream.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Broker_SubscribeClient, error)
	// Handler initiates downlink stream.
	Publish(ctx context.Context, opts ...grpc.CallOption) (Broker_PublishClient, error)
	// Router requests device activation
	Activate(ctx context.Context, in *DeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) Associate(ctx context.Context, opts ...grpc.CallOption) (Broker_AssociateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Broker_serviceDesc.Streams[0], c.cc, "/broker.Broker/Associate", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerAssociateClient{stream}
	return x, nil
}

type Broker_AssociateClient interface {
	Send(*UplinkMessage) error
	Recv() (*DownlinkMessage, error)
	grpc.ClientStream
}

type brokerAssociateClient struct {
	grpc.ClientStream
}

func (x *brokerAssociateClient) Send(m *UplinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerAssociateClient) Recv() (*DownlinkMessage, error) {
	m := new(DownlinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Broker_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Broker_serviceDesc.Streams[1], c.cc, "/broker.Broker/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Broker_SubscribeClient interface {
	Recv() (*DeduplicatedUplinkMessage, error)
	grpc.ClientStream
}

type brokerSubscribeClient struct {
	grpc.ClientStream
}

func (x *brokerSubscribeClient) Recv() (*DeduplicatedUplinkMessage, error) {
	m := new(DeduplicatedUplinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Broker_PublishClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Broker_serviceDesc.Streams[2], c.cc, "/broker.Broker/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerPublishClient{stream}
	return x, nil
}

type Broker_PublishClient interface {
	Send(*DownlinkMessage) error
	CloseAndRecv() (*api.Ack, error)
	grpc.ClientStream
}

type brokerPublishClient struct {
	grpc.ClientStream
}

func (x *brokerPublishClient) Send(m *DownlinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerPublishClient) CloseAndRecv() (*api.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Activate(ctx context.Context, in *DeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error) {
	out := new(DeviceActivationResponse)
	err := grpc.Invoke(ctx, "/broker.Broker/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Broker service

type BrokerServer interface {
	// Router initiates an Association with the Broker.
	Associate(Broker_AssociateServer) error
	// Handler subscribes to uplink stream.
	Subscribe(*SubscribeRequest, Broker_SubscribeServer) error
	// Handler initiates downlink stream.
	Publish(Broker_PublishServer) error
	// Router requests device activation
	Activate(context.Context, *DeviceActivationRequest) (*DeviceActivationResponse, error)
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_Associate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Associate(&brokerAssociateServer{stream})
}

type Broker_AssociateServer interface {
	Send(*DownlinkMessage) error
	Recv() (*UplinkMessage, error)
	grpc.ServerStream
}

type brokerAssociateServer struct {
	grpc.ServerStream
}

func (x *brokerAssociateServer) Send(m *DownlinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerAssociateServer) Recv() (*UplinkMessage, error) {
	m := new(UplinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServer).Subscribe(m, &brokerSubscribeServer{stream})
}

type Broker_SubscribeServer interface {
	Send(*DeduplicatedUplinkMessage) error
	grpc.ServerStream
}

type brokerSubscribeServer struct {
	grpc.ServerStream
}

func (x *brokerSubscribeServer) Send(m *DeduplicatedUplinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Broker_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Publish(&brokerPublishServer{stream})
}

type Broker_PublishServer interface {
	SendAndClose(*api.Ack) error
	Recv() (*DownlinkMessage, error)
	grpc.ServerStream
}

type brokerPublishServer struct {
	grpc.ServerStream
}

func (x *brokerPublishServer) SendAndClose(m *api.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerPublishServer) Recv() (*DownlinkMessage, error) {
	m := new(DownlinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.Broker/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Activate(ctx, req.(*DeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _Broker_Activate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Associate",
			Handler:       _Broker_Associate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Broker_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Publish",
			Handler:       _Broker_Publish_Handler,
			ClientStreams: true,
		},
	},
}

// Client API for BrokerManager service

type BrokerManagerClient interface {
	// Network operator lists all Applications on this Broker
	Applications(ctx context.Context, in *ApplicationsRequest, opts ...grpc.CallOption) (*ApplicationsResponse, error)
	// Application owner registers Application with Broker Manager
	RegisterApplication(ctx context.Context, in *RegisterApplicationRequest, opts ...grpc.CallOption) (*api.Ack, error)
	// Application owner unregisters Application with Broker Manager
	UnregisterApplication(ctx context.Context, in *UnregisterApplicationRequest, opts ...grpc.CallOption) (*api.Ack, error)
	// Network operator requests Broker status
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type brokerManagerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerManagerClient(cc *grpc.ClientConn) BrokerManagerClient {
	return &brokerManagerClient{cc}
}

func (c *brokerManagerClient) Applications(ctx context.Context, in *ApplicationsRequest, opts ...grpc.CallOption) (*ApplicationsResponse, error) {
	out := new(ApplicationsResponse)
	err := grpc.Invoke(ctx, "/broker.BrokerManager/Applications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerManagerClient) RegisterApplication(ctx context.Context, in *RegisterApplicationRequest, opts ...grpc.CallOption) (*api.Ack, error) {
	out := new(api.Ack)
	err := grpc.Invoke(ctx, "/broker.BrokerManager/RegisterApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerManagerClient) UnregisterApplication(ctx context.Context, in *UnregisterApplicationRequest, opts ...grpc.CallOption) (*api.Ack, error) {
	out := new(api.Ack)
	err := grpc.Invoke(ctx, "/broker.BrokerManager/UnregisterApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerManagerClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/broker.BrokerManager/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BrokerManager service

type BrokerManagerServer interface {
	// Network operator lists all Applications on this Broker
	Applications(context.Context, *ApplicationsRequest) (*ApplicationsResponse, error)
	// Application owner registers Application with Broker Manager
	RegisterApplication(context.Context, *RegisterApplicationRequest) (*api.Ack, error)
	// Application owner unregisters Application with Broker Manager
	UnregisterApplication(context.Context, *UnregisterApplicationRequest) (*api.Ack, error)
	// Network operator requests Broker status
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterBrokerManagerServer(s *grpc.Server, srv BrokerManagerServer) {
	s.RegisterService(&_BrokerManager_serviceDesc, srv)
}

func _BrokerManager_Applications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerManagerServer).Applications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerManager/Applications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerManagerServer).Applications(ctx, req.(*ApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerManager_RegisterApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerManagerServer).RegisterApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerManager/RegisterApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerManagerServer).RegisterApplication(ctx, req.(*RegisterApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerManager_UnregisterApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerManagerServer).UnregisterApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerManager/UnregisterApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerManagerServer).UnregisterApplication(ctx, req.(*UnregisterApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerManager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerManagerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerManager/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerManagerServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrokerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.BrokerManager",
	HandlerType: (*BrokerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Applications",
			Handler:    _BrokerManager_Applications_Handler,
		},
		{
			MethodName: "RegisterApplication",
			Handler:    _BrokerManager_RegisterApplication_Handler,
		},
		{
			MethodName: "UnregisterApplication",
			Handler:    _BrokerManager_UnregisterApplication_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _BrokerManager_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *DownlinkOption) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DownlinkOption) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBroker(data, i, uint64(len(m.Identifier)))
		i += copy(data[i:], m.Identifier)
	}
	if m.Score != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintBroker(data, i, uint64(m.Score))
	}
	if m.Deadline != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintBroker(data, i, uint64(m.Deadline))
	}
	return i, nil
}

func (m *UplinkMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UplinkMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBroker(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.ProtocolMetadata != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintBroker(data, i, uint64(m.ProtocolMetadata.Size()))
		n1, err := m.ProtocolMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.GatewayMetadata != nil {
		data[i] = 0x62
		i++
		i = encodeVarintBroker(data, i, uint64(m.GatewayMetadata.Size()))
		n2, err := m.GatewayMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.DownlinkOptions) > 0 {
		for _, msg := range m.DownlinkOptions {
			data[i] = 0xaa
			i++
			data[i] = 0x1
			i++
			i = encodeVarintBroker(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DownlinkMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DownlinkMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBroker(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.DownlinkOption != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintBroker(data, i, uint64(m.DownlinkOption.Size()))
		n3, err := m.DownlinkOption.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *DeviceActivationResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeviceActivationResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBroker(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.DownlinkOption != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintBroker(data, i, uint64(m.DownlinkOption.Size()))
		n4, err := m.DownlinkOption.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *DeduplicatedUplinkMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeduplicatedUplinkMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBroker(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.DevEui != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintBroker(data, i, uint64(m.DevEui.Size()))
		n5, err := m.DevEui.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.AppEui != nil {
		data[i] = 0x62
		i++
		i = encodeVarintBroker(data, i, uint64(m.AppEui.Size()))
		n6, err := m.AppEui.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ProtocolMetadata != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.ProtocolMetadata.Size()))
		n7, err := m.ProtocolMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.GatewayMetadata) > 0 {
		for _, msg := range m.GatewayMetadata {
			data[i] = 0xb2
			i++
			data[i] = 0x1
			i++
			i = encodeVarintBroker(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ResponseTemplate != nil {
		data[i] = 0xfa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.ResponseTemplate.Size()))
		n8, err := m.ResponseTemplate.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.NeedDownlink {
		data[i] = 0x80
		i++
		data[i] = 0x2
		i++
		if m.NeedDownlink {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeviceActivationRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeviceActivationRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBroker(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.DevEui != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintBroker(data, i, uint64(m.DevEui.Size()))
		n9, err := m.DevEui.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.AppEui != nil {
		data[i] = 0x62
		i++
		i = encodeVarintBroker(data, i, uint64(m.AppEui.Size()))
		n10, err := m.AppEui.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ProtocolMetadata != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.ProtocolMetadata.Size()))
		n11, err := m.ProtocolMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.GatewayMetadata != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.GatewayMetadata.Size()))
		n12, err := m.GatewayMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.ActivationMetadata != nil {
		data[i] = 0xba
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.ActivationMetadata.Size()))
		n13, err := m.ActivationMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.DownlinkOptions) > 0 {
		for _, msg := range m.DownlinkOptions {
			data[i] = 0xfa
			i++
			data[i] = 0x1
			i++
			i = encodeVarintBroker(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeduplicatedDeviceActivationRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeduplicatedDeviceActivationRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBroker(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.DevEui != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintBroker(data, i, uint64(m.DevEui.Size()))
		n14, err := m.DevEui.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.AppEui != nil {
		data[i] = 0x62
		i++
		i = encodeVarintBroker(data, i, uint64(m.AppEui.Size()))
		n15, err := m.AppEui.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.ProtocolMetadata != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.ProtocolMetadata.Size()))
		n16, err := m.ProtocolMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.GatewayMetadata != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.GatewayMetadata.Size()))
		n17, err := m.GatewayMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.ActivationMetadata != nil {
		data[i] = 0xba
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.ActivationMetadata.Size()))
		n18, err := m.ActivationMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.ResponseTemplate != nil {
		data[i] = 0xfa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.ResponseTemplate.Size()))
		n19, err := m.ResponseTemplate.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *SubscribeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscribeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ApplicationsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ApplicationsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ApplicationsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ApplicationsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppEuis) > 0 {
		for _, s := range m.AppEuis {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *RegisterApplicationRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RegisterApplicationRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppEui) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBroker(data, i, uint64(len(m.AppEui)))
		i += copy(data[i:], m.AppEui)
	}
	return i, nil
}

func (m *UnregisterApplicationRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnregisterApplicationRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppEui) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBroker(data, i, uint64(len(m.AppEui)))
		i += copy(data[i:], m.AppEui)
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatusResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uplink != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBroker(data, i, uint64(m.Uplink.Size()))
		n20, err := m.Uplink.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.UplinkUnique != nil {
		data[i] = 0x12
		i++
		i = encodeVarintBroker(data, i, uint64(m.UplinkUnique.Size()))
		n21, err := m.UplinkUnique.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Downlink != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintBroker(data, i, uint64(m.Downlink.Size()))
		n22, err := m.Downlink.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Activations != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.Activations.Size()))
		n23, err := m.Activations.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.ActivationsUnique != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.ActivationsUnique.Size()))
		n24, err := m.ActivationsUnique.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.ActivationsAccepted != nil {
		data[i] = 0xba
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.ActivationsAccepted.Size()))
		n25, err := m.ActivationsAccepted.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.Deduplication != nil {
		data[i] = 0xfa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBroker(data, i, uint64(m.Deduplication.Size()))
		n26, err := m.Deduplication.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.ConnectedRouters != 0 {
		data[i] = 0xc8
		i++
		data[i] = 0x2
		i++
		i = encodeVarintBroker(data, i, uint64(m.ConnectedRouters))
	}
	if m.ConnectedHandlers != 0 {
		data[i] = 0xd0
		i++
		data[i] = 0x2
		i++
		i = encodeVarintBroker(data, i, uint64(m.ConnectedHandlers))
	}
	return i, nil
}

func encodeFixed64Broker(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Broker(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBroker(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *DownlinkOption) Size() (n int) {
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovBroker(uint64(m.Score))
	}
	if m.Deadline != 0 {
		n += 1 + sovBroker(uint64(m.Deadline))
	}
	return n
}

func (m *UplinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.ProtocolMetadata != nil {
		l = m.ProtocolMetadata.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.GatewayMetadata != nil {
		l = m.GatewayMetadata.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if len(m.DownlinkOptions) > 0 {
		for _, e := range m.DownlinkOptions {
			l = e.Size()
			n += 2 + l + sovBroker(uint64(l))
		}
	}
	return n
}

func (m *DownlinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.DownlinkOption != nil {
		l = m.DownlinkOption.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *DeviceActivationResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.DownlinkOption != nil {
		l = m.DownlinkOption.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *DeduplicatedUplinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.DevEui != nil {
		l = m.DevEui.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.AppEui != nil {
		l = m.AppEui.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.ProtocolMetadata != nil {
		l = m.ProtocolMetadata.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if len(m.GatewayMetadata) > 0 {
		for _, e := range m.GatewayMetadata {
			l = e.Size()
			n += 2 + l + sovBroker(uint64(l))
		}
	}
	if m.ResponseTemplate != nil {
		l = m.ResponseTemplate.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.NeedDownlink {
		n += 3
	}
	return n
}

func (m *DeviceActivationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.DevEui != nil {
		l = m.DevEui.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.AppEui != nil {
		l = m.AppEui.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.ProtocolMetadata != nil {
		l = m.ProtocolMetadata.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.GatewayMetadata != nil {
		l = m.GatewayMetadata.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.ActivationMetadata != nil {
		l = m.ActivationMetadata.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if len(m.DownlinkOptions) > 0 {
		for _, e := range m.DownlinkOptions {
			l = e.Size()
			n += 2 + l + sovBroker(uint64(l))
		}
	}
	return n
}

func (m *DeduplicatedDeviceActivationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.DevEui != nil {
		l = m.DevEui.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.AppEui != nil {
		l = m.AppEui.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.ProtocolMetadata != nil {
		l = m.ProtocolMetadata.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.GatewayMetadata != nil {
		l = m.GatewayMetadata.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.ActivationMetadata != nil {
		l = m.ActivationMetadata.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.ResponseTemplate != nil {
		l = m.ResponseTemplate.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ApplicationsRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ApplicationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.AppEuis) > 0 {
		for _, s := range m.AppEuis {
			l = len(s)
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	return n
}

func (m *RegisterApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppEui)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *UnregisterApplicationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppEui)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.Uplink != nil {
		l = m.Uplink.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.UplinkUnique != nil {
		l = m.UplinkUnique.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Downlink != nil {
		l = m.Downlink.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Activations != nil {
		l = m.Activations.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.ActivationsUnique != nil {
		l = m.ActivationsUnique.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.ActivationsAccepted != nil {
		l = m.ActivationsAccepted.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.Deduplication != nil {
		l = m.Deduplication.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.ConnectedRouters != 0 {
		n += 2 + sovBroker(uint64(m.ConnectedRouters))
	}
	if m.ConnectedHandlers != 0 {
		n += 2 + sovBroker(uint64(m.ConnectedHandlers))
	}
	return n
}

func sovBroker(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBroker(x uint64) (n int) {
	return sovBroker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DownlinkOption) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Score |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Deadline |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolMetadata == nil {
				m.ProtocolMetadata = &protocol.RxMetadata{}
			}
			if err := m.ProtocolMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayMetadata == nil {
				m.GatewayMetadata = &gateway.RxMetadata{}
			}
			if err := m.GatewayMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownlinkOptions = append(m.DownlinkOptions, &DownlinkOption{})
			if err := m.DownlinkOptions[len(m.DownlinkOptions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkOption == nil {
				m.DownlinkOption = &DownlinkOption{}
			}
			if err := m.DownlinkOption.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceActivationResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkOption == nil {
				m.DownlinkOption = &DownlinkOption{}
			}
			if err := m.DownlinkOption.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeduplicatedUplinkMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeduplicatedUplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeduplicatedUplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevEUI
			m.DevEui = &v
			if err := m.DevEui.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.AppEUI
			m.AppEui = &v
			if err := m.AppEui.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolMetadata == nil {
				m.ProtocolMetadata = &protocol.RxMetadata{}
			}
			if err := m.ProtocolMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayMetadata = append(m.GatewayMetadata, &gateway.RxMetadata{})
			if err := m.GatewayMetadata[len(m.GatewayMetadata)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseTemplate == nil {
				m.ResponseTemplate = &DownlinkMessage{}
			}
			if err := m.ResponseTemplate.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedDownlink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedDownlink = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceActivationRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevEUI
			m.DevEui = &v
			if err := m.DevEui.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.AppEUI
			m.AppEui = &v
			if err := m.AppEui.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolMetadata == nil {
				m.ProtocolMetadata = &protocol.RxMetadata{}
			}
			if err := m.ProtocolMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayMetadata == nil {
				m.GatewayMetadata = &gateway.RxMetadata{}
			}
			if err := m.GatewayMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationMetadata == nil {
				m.ActivationMetadata = &protocol.ActivationMetadata{}
			}
			if err := m.ActivationMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownlinkOptions = append(m.DownlinkOptions, &DownlinkOption{})
			if err := m.DownlinkOptions[len(m.DownlinkOptions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeduplicatedDeviceActivationRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeduplicatedDeviceActivationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeduplicatedDeviceActivationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevEUI
			m.DevEui = &v
			if err := m.DevEui.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.AppEUI
			m.AppEui = &v
			if err := m.AppEui.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolMetadata == nil {
				m.ProtocolMetadata = &protocol.RxMetadata{}
			}
			if err := m.ProtocolMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayMetadata == nil {
				m.GatewayMetadata = &gateway.RxMetadata{}
			}
			if err := m.GatewayMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationMetadata == nil {
				m.ActivationMetadata = &protocol.ActivationMetadata{}
			}
			if err := m.ActivationMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseTemplate == nil {
				m.ResponseTemplate = &DeviceActivationResponse{}
			}
			if err := m.ResponseTemplate.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEuis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEuis = append(m.AppEuis, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterApplicationRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEui = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnregisterApplicationRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEui = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uplink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uplink == nil {
				m.Uplink = &api.Rates{}
			}
			if err := m.Uplink.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkUnique", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UplinkUnique == nil {
				m.UplinkUnique = &api.Rates{}
			}
			if err := m.UplinkUnique.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Downlink == nil {
				m.Downlink = &api.Rates{}
			}
			if err := m.Downlink.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activations == nil {
				m.Activations = &api.Rates{}
			}
			if err := m.Activations.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationsUnique", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationsUnique == nil {
				m.ActivationsUnique = &api.Rates{}
			}
			if err := m.ActivationsUnique.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationsAccepted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationsAccepted == nil {
				m.ActivationsAccepted = &api.Rates{}
			}
			if err := m.ActivationsAccepted.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deduplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deduplication == nil {
				m.Deduplication = &api.Percentiles{}
			}
			if err := m.Deduplication.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedRouters", wireType)
			}
			m.ConnectedRouters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ConnectedRouters |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedHandlers", wireType)
			}
			m.ConnectedHandlers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ConnectedHandlers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBroker(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBroker
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBroker
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBroker(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBroker = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBroker   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorBroker = []byte{
	// 1028 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x27, 0x0d, 0xa4, 0xe9, 0x4b, 0xd2, 0xa4, 0xd3, 0xa6, 0xf5, 0x86, 0xaa, 0x2d, 0x5e, 0x84,
	0xca, 0x9f, 0x4d, 0xd8, 0xa2, 0xa5, 0x5a, 0x21, 0x40, 0x29, 0x5d, 0xc1, 0x22, 0x65, 0x59, 0x79,
	0xdb, 0x73, 0x34, 0xb1, 0x67, 0x93, 0x51, 0x53, 0xdb, 0x78, 0xc6, 0x2d, 0xbd, 0xf1, 0x21, 0x38,
	0x70, 0xe5, 0xb3, 0x70, 0x81, 0x1b, 0x67, 0x0e, 0x08, 0xc1, 0x85, 0x1b, 0x5f, 0x81, 0xf1, 0x78,
	0xc6, 0x7f, 0x9a, 0x98, 0x86, 0x45, 0x48, 0x1c, 0x7a, 0xb0, 0xec, 0x79, 0x7f, 0x7e, 0x6f, 0xe6,
	0xbd, 0xdf, 0x1b, 0x3f, 0x38, 0x1c, 0x53, 0x3e, 0x09, 0x47, 0x5d, 0xdb, 0x3b, 0xef, 0x9d, 0x4c,
	0xc8, 0xc9, 0x84, 0xba, 0x63, 0xf6, 0x84, 0xf0, 0x4b, 0x2f, 0x38, 0xeb, 0x71, 0xee, 0xf6, 0xb0,
	0x4f, 0x7b, 0xa3, 0xc0, 0x3b, 0x23, 0x81, 0x7a, 0x75, 0xfd, 0xc0, 0xe3, 0x1e, 0xaa, 0xc4, 0xab,
	0xce, 0xbd, 0x0c, 0xc0, 0xd8, 0x1b, 0x7b, 0x3d, 0xa9, 0x1e, 0x85, 0xcf, 0xe5, 0x4a, 0x2e, 0xe4,
	0x57, 0xec, 0x96, 0x33, 0x2f, 0x8c, 0x27, 0x1e, 0x65, 0xfe, 0xc1, 0x22, 0xe6, 0xd2, 0xd4, 0xf6,
	0xa6, 0xc9, 0x87, 0x72, 0x7e, 0xb8, 0x88, 0xf3, 0x18, 0x73, 0x72, 0x89, 0xaf, 0xf4, 0x3b, 0x76,
	0x35, 0x47, 0xb0, 0x7a, 0xec, 0x5d, 0xba, 0x53, 0xea, 0x9e, 0x7d, 0xe1, 0x73, 0xea, 0xb9, 0x68,
	0x07, 0x80, 0x3a, 0xc4, 0xe5, 0xf4, 0x39, 0x25, 0x81, 0x51, 0xda, 0x2b, 0xed, 0xaf, 0x58, 0x19,
	0x09, 0xda, 0x80, 0x57, 0x98, 0xed, 0x05, 0xc4, 0x58, 0x12, 0xaa, 0x86, 0x15, 0x2f, 0x50, 0x07,
	0xaa, 0x0e, 0xc1, 0x8e, 0xc0, 0x21, 0x46, 0x59, 0x28, 0xca, 0x56, 0xb2, 0x36, 0xff, 0x2c, 0x41,
	0xe3, 0xd4, 0x8f, 0x42, 0x0c, 0x08, 0x63, 0x78, 0x4c, 0x90, 0x01, 0xcb, 0x3e, 0xbe, 0x9a, 0x7a,
	0xd8, 0x91, 0x01, 0xea, 0x96, 0x5e, 0xa2, 0x3e, 0xac, 0xe9, 0xc3, 0x0d, 0xcf, 0x09, 0xc7, 0x0e,
	0xe6, 0xd8, 0xa8, 0x09, 0x9b, 0xda, 0xc1, 0x46, 0x37, 0x39, 0xb6, 0xf5, 0xd5, 0x40, 0xe9, 0xac,
	0x96, 0x16, 0x6a, 0x09, 0xfa, 0x08, 0x5a, 0xea, 0x8c, 0x29, 0x42, 0x5d, 0x22, 0xac, 0x77, 0xf5,
	0xe1, 0x33, 0x00, 0x4d, 0x25, 0x4b, 0xfc, 0xfb, 0xd0, 0x72, 0x54, 0x4a, 0x86, 0x9e, 0xcc, 0x09,
	0x33, 0xda, 0x7b, 0x65, 0xe1, 0xbf, 0xd9, 0x55, 0xcc, 0xc8, 0xa7, 0xcc, 0x6a, 0x3a, 0xb9, 0x35,
	0x33, 0xa7, 0xd0, 0xd4, 0x26, 0x37, 0x1f, 0xf9, 0x63, 0x68, 0x5e, 0x8b, 0xa7, 0x0e, 0x5c, 0x14,
	0x6e, 0x35, 0x1f, 0xce, 0x0c, 0xc1, 0x38, 0x26, 0x17, 0xd4, 0x26, 0x7d, 0x9b, 0xd3, 0x0b, 0x2c,
	0x6d, 0x08, 0xf3, 0xc5, 0x46, 0xfe, 0xd3, 0xb0, 0xdf, 0x97, 0xe1, 0xce, 0x31, 0x71, 0x42, 0x51,
	0x59, 0x5b, 0xa4, 0xd0, 0x59, 0xb4, 0xc4, 0x4f, 0x60, 0xd9, 0x21, 0x17, 0x43, 0x12, 0x52, 0x19,
	0xb0, 0x7e, 0xf4, 0xe0, 0xe7, 0x5f, 0x76, 0xef, 0xdf, 0x44, 0xe1, 0x88, 0x65, 0x3d, 0x7e, 0xe5,
	0x13, 0xd6, 0x15, 0x87, 0x7d, 0x74, 0xfa, 0xd8, 0xaa, 0x08, 0x94, 0x47, 0x21, 0x8d, 0xf0, 0xb0,
	0xef, 0x4b, 0xbc, 0xfa, 0x0b, 0xe1, 0xf5, 0x7d, 0x5f, 0xe2, 0x09, 0x94, 0x08, 0x6f, 0x2e, 0x05,
	0xdb, 0xff, 0x9a, 0x82, 0x9b, 0x92, 0x42, 0x8b, 0x51, 0xf0, 0x18, 0xd6, 0x02, 0x55, 0xc1, 0x21,
	0x27, 0xe7, 0xfe, 0x54, 0xe8, 0x8d, 0x5d, 0xb9, 0x85, 0xad, 0xeb, 0xd5, 0x51, 0x09, 0xb7, 0x5a,
	0xda, 0xe3, 0x44, 0x39, 0xa0, 0xbb, 0xd0, 0x70, 0x09, 0x71, 0x86, 0xba, 0x6e, 0xc6, 0x9e, 0x40,
	0xa8, 0x5a, 0xf5, 0x48, 0xa8, 0xbd, 0xcd, 0x3f, 0xca, 0xb0, 0x35, 0xcb, 0x9e, 0x2f, 0x43, 0xc2,
	0xf8, 0x6d, 0x0d, 0x67, 0x6b, 0xb8, 0xf8, 0x35, 0x32, 0x80, 0x75, 0x9c, 0x64, 0x34, 0x85, 0xd8,
	0x92, 0x10, 0xdb, 0xe9, 0x26, 0xd2, 0xb4, 0x27, 0x58, 0x08, 0xcf, 0xc8, 0xe6, 0xde, 0x4a, 0xbb,
	0xff, 0xec, 0x56, 0xfa, 0xfa, 0x65, 0xb8, 0x9b, 0x6d, 0xd8, 0xdb, 0xb2, 0xff, 0xff, 0xcb, 0x3e,
	0x28, 0xbe, 0x09, 0xf6, 0x92, 0xba, 0x17, 0x5c, 0xfe, 0xb3, 0x57, 0x82, 0x89, 0xa0, 0xf5, 0x2c,
	0x1c, 0x31, 0x3b, 0xa0, 0x23, 0xa2, 0xca, 0x6d, 0xb6, 0x61, 0x5d, 0xa4, 0x51, 0x72, 0x22, 0xa2,
	0x89, 0x16, 0xdf, 0x87, 0x8d, 0xbc, 0x58, 0xfd, 0x51, 0xee, 0x40, 0x55, 0xd5, 0x8c, 0x09, 0x7a,
	0x94, 0xc5, 0x74, 0xb0, 0x1c, 0x67, 0x9f, 0x99, 0x0f, 0xa0, 0x63, 0x91, 0x31, 0x65, 0x9c, 0x04,
	0x19, 0x57, 0x4d, 0xab, 0xad, 0xb4, 0xd8, 0xf1, 0x54, 0xa1, 0xaa, 0x66, 0x1e, 0xc2, 0xf6, 0xa9,
	0x1b, 0xbc, 0x80, 0x63, 0x13, 0x1a, 0xcf, 0x38, 0xe6, 0x61, 0xb2, 0xe7, 0x1f, 0xcb, 0xb0, 0xaa,
	0x25, 0x6a, 0xbb, 0x26, 0x54, 0x42, 0xf9, 0x63, 0x92, 0xbe, 0xb5, 0x03, 0xe8, 0x46, 0x43, 0x97,
	0x25, 0x92, 0xc1, 0x2c, 0xa5, 0x41, 0x3d, 0x68, 0xc4, 0x5f, 0xc3, 0xd0, 0xa5, 0x02, 0x49, 0x8e,
	0x36, 0x79, 0xd3, 0x7a, 0x6c, 0x70, 0x2a, 0xf5, 0xe8, 0x0d, 0x31, 0xed, 0xe8, 0x4b, 0xb5, 0x36,
	0x63, 0x9b, 0xe8, 0xd0, 0x3b, 0x50, 0x4b, 0x6b, 0xca, 0x14, 0x13, 0xb3, 0xa6, 0x59, 0x35, 0x7a,
	0x08, 0x19, 0x06, 0x30, 0xbd, 0x97, 0xcd, 0x19, 0xa7, 0xb5, 0x8c, 0x95, 0xda, 0xd0, 0x87, 0xb0,
	0x91, 0x75, 0xc5, 0xb6, 0x4d, 0x7c, 0xd1, 0xe1, 0x8a, 0x76, 0x59, 0xe7, 0x0c, 0x3b, 0x59, 0x5f,
	0x99, 0xa1, 0xf7, 0xa1, 0xe1, 0x24, 0x17, 0x43, 0x34, 0x09, 0xc4, 0x0c, 0x6b, 0x49, 0xbf, 0xa7,
	0x24, 0xb0, 0xa3, 0xe9, 0x6f, 0x2a, 0xbc, 0xf3, 0x66, 0xe8, 0x6d, 0x58, 0xb3, 0x3d, 0xd7, 0x25,
	0xb6, 0x00, 0x19, 0x06, 0x5e, 0x28, 0xea, 0xc7, 0x8c, 0x37, 0xe5, 0x5c, 0xd8, 0x4a, 0x14, 0x56,
	0x2c, 0x47, 0xf7, 0x00, 0xa5, 0xc6, 0x13, 0xec, 0x3a, 0xd3, 0xc8, 0xfa, 0x2d, 0x69, 0x9d, 0xc2,
	0x7c, 0xa6, 0x14, 0x07, 0xdf, 0x2c, 0x41, 0xe5, 0x48, 0x12, 0x5c, 0x8c, 0x2a, 0x2b, 0x7d, 0xc6,
	0x3c, 0x9b, 0x46, 0x7f, 0xb5, 0xb6, 0xa6, 0x7d, 0x6e, 0xde, 0xe8, 0x14, 0xfd, 0x17, 0xf7, 0x4b,
	0xef, 0x96, 0xd0, 0xe7, 0xb0, 0x92, 0xd0, 0x1e, 0x19, 0xda, 0xf2, 0x7a, 0x27, 0x74, 0x5e, 0x4b,
	0x3b, 0xaa, 0x60, 0xac, 0x11, 0x58, 0x5d, 0x58, 0x7e, 0x1a, 0x8e, 0xa6, 0x94, 0x4d, 0x50, 0x51,
	0xcc, 0x4e, 0x55, 0x26, 0xae, 0x6f, 0x9f, 0xed, 0x97, 0x44, 0x07, 0x57, 0x55, 0x6b, 0x12, 0xb4,
	0x5b, 0xdc, 0xb2, 0xf1, 0x0e, 0x6e, 0xec, 0xe9, 0x83, 0xef, 0x96, 0xa0, 0x11, 0xa7, 0x65, 0x80,
	0x5d, 0x11, 0x2b, 0x40, 0x8f, 0xa1, 0x9e, 0x6d, 0x54, 0xf4, 0xaa, 0xc6, 0x98, 0xd3, 0xd5, 0x9d,
	0xed, 0xf9, 0x4a, 0xd5, 0x2c, 0x9f, 0xc0, 0xfa, 0x9c, 0x06, 0x46, 0xa6, 0x76, 0x2a, 0xee, 0xee,
	0xf4, 0xc8, 0xe8, 0x53, 0x68, 0xcf, 0x6d, 0x67, 0xf4, 0x7a, 0x52, 0xb9, 0xbf, 0xe9, 0xf6, 0x0c,
	0xd0, 0x21, 0x54, 0xe2, 0x66, 0x4e, 0x6b, 0x9e, 0x6b, 0xf7, 0xce, 0xe6, 0x75, 0x71, 0x7c, 0x8c,
	0xa3, 0xd6, 0x0f, 0xbf, 0xed, 0x94, 0x7e, 0x12, 0xcf, 0xaf, 0xe2, 0xf9, 0xf6, 0xf7, 0x9d, 0x97,
	0x46, 0x15, 0x79, 0xef, 0xbe, 0xf7, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0x33, 0xf9, 0xe4,
	0x06, 0x0e, 0x00, 0x00,
}
